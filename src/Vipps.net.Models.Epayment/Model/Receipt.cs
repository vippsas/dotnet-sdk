/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Receipt
    /// </summary>
    [DataContract(Name = "Receipt")]
    public partial class Receipt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Receipt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        /// <param name="orderLines">Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000. (required).</param>
        /// <param name="bottomLine">bottomLine (required).</param>
        public Receipt(List<OrderLine> orderLines = default(List<OrderLine>), BottomLine bottomLine = default(BottomLine))
        {
            // to ensure "orderLines" is required (not null)
            if (orderLines == null)
            {
                throw new ArgumentNullException("orderLines is a required property for Receipt and cannot be null");
            }
            this.OrderLines = orderLines;
            // to ensure "bottomLine" is required (not null)
            if (bottomLine == null)
            {
                throw new ArgumentNullException("bottomLine is a required property for Receipt and cannot be null");
            }
            this.BottomLine = bottomLine;
        }

        /// <summary>
        /// Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>
        /// <value>Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.</value>
        [DataMember(Name = "orderLines", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderLine> OrderLines { get; set; }

        /// <summary>
        /// Gets or Sets BottomLine
        /// </summary>
        [DataMember(Name = "bottomLine", IsRequired = true, EmitDefaultValue = true)]
        public BottomLine BottomLine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  OrderLines: ").Append(OrderLines).Append("\n");
            sb.Append("  BottomLine: ").Append(BottomLine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
