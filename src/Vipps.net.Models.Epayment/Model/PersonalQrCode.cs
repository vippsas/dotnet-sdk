/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// The full content of the user&#39;s personal QR code in the app, used in &#39;merchant scan&#39; scenarios.  After the personal QR code has been scanned in a physical context, send the complete QR code content in this field to initiate a payment from the user (and do not send &#x60;phoneNumber&#x60;).  **Important:** The content of the QR code can change at any time, without warning. It is very important to send the _complete content of the QR code_, like the complete URL in the example below. While the personal QR code does reveal the user&#39;s phone number in this example, that may change. The [Userinfo API](https://developer.vippsmobilepay.com/docs/APIs/userinfo-api/) should be used if you need the user to share personal information,  such as phone number, email address, etc.
    /// </summary>
    [DataContract(Name = "PersonalQrCode")]
    public partial class PersonalQrCode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalQrCode" /> class.
        /// </summary>
        /// <param name="personalQr">The full content of the user&#39;s personal QR code in the app..</param>
        public PersonalQrCode(string personalQr = default(string))
        {
            this.PersonalQr = personalQr;
        }

        /// <summary>
        /// The full content of the user&#39;s personal QR code in the app.
        /// </summary>
        /// <value>The full content of the user&#39;s personal QR code in the app.</value>
        /*
        <example>https://qr.vipps.no/28/2/01/031/4712345678?v&#x3D;1</example>
        */
        [DataMember(Name = "personalQr", EmitDefaultValue = false)]
        public string PersonalQr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonalQrCode {\n");
            sb.Append("  PersonalQr: ").Append(PersonalQr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PersonalQr (string) maxLength
            if (this.PersonalQr != null && this.PersonalQr.Length > 255)
            {
                yield return new ValidationResult("Invalid value for PersonalQr, length must be less than 255.", new [] { "PersonalQr" });
            }

            // PersonalQr (string) minLength
            if (this.PersonalQr != null && this.PersonalQr.Length < 5)
            {
                yield return new ValidationResult("Invalid value for PersonalQr, length must be greater than 5.", new [] { "PersonalQr" });
            }

            yield break;
        }
    }

}
