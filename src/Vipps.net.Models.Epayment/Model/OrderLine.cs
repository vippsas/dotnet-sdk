/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
    /// </summary>
    [DataContract(Name = "OrderLine")]
    public partial class OrderLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderLine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLine" /> class.
        /// </summary>
        /// <param name="name">Name of the product in the order line. (required).</param>
        /// <param name="id">The product ID (required).</param>
        /// <param name="totalAmount">Total amount of the order line, including tax and discount. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000. (required).</param>
        /// <param name="totalAmountExcludingTax">Total amount of order line with discount excluding tax. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000. (required).</param>
        /// <param name="totalTaxAmount">Total tax amount paid for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000. (required).</param>
        /// <param name="taxPercentage">Tax percentage for the order line. Between 0-100. Either this or taxRate must be set..</param>
        /// <param name="taxRate">Tax percentage for the order line, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000. Either this or taxPercentage must be set..</param>
        /// <param name="unitInfo">unitInfo.</param>
        /// <param name="discount">Total discount for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 1.00 EUR/NOK/DKK should be written as 100..</param>
        /// <param name="productUrl">Optional URL linking back to the product at the merchant..</param>
        /// <param name="isReturn">Flag for marking the order line as returned. This will make it count negative towards all the sums in bottomLine..</param>
        /// <param name="isShipping">Flag for marking the order line as a shipping line. This will be shown differently in the app..</param>
        public OrderLine(string name = default(string), string id = default(string), long totalAmount = default(long), long totalAmountExcludingTax = default(long), long totalTaxAmount = default(long), int? taxPercentage = default(int?), int? taxRate = default(int?), UnitInfo unitInfo = default(UnitInfo), long? discount = default(long?), string productUrl = default(string), bool? isReturn = default(bool?), bool? isShipping = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for OrderLine and cannot be null");
            }
            this.Name = name;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OrderLine and cannot be null");
            }
            this.Id = id;
            this.TotalAmount = totalAmount;
            this.TotalAmountExcludingTax = totalAmountExcludingTax;
            this.TotalTaxAmount = totalTaxAmount;
            this.TaxPercentage = taxPercentage;
            this.TaxRate = taxRate;
            this.UnitInfo = unitInfo;
            this.Discount = discount;
            this.ProductUrl = productUrl;
            this.IsReturn = isReturn;
            this.IsShipping = isShipping;
        }

        /// <summary>
        /// Name of the product in the order line.
        /// </summary>
        /// <value>Name of the product in the order line.</value>
        /*
        <example>socks</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The product ID
        /// </summary>
        /// <value>The product ID</value>
        /*
        <example>1234567890</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Total amount of the order line, including tax and discount. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>
        /// <value>Total amount of the order line, including tax and discount. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.</value>
        /*
        <example>1000</example>
        */
        [DataMember(Name = "totalAmount", IsRequired = true, EmitDefaultValue = true)]
        public long TotalAmount { get; set; }

        /// <summary>
        /// Total amount of order line with discount excluding tax. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>
        /// <value>Total amount of order line with discount excluding tax. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.</value>
        /*
        <example>800</example>
        */
        [DataMember(Name = "totalAmountExcludingTax", IsRequired = true, EmitDefaultValue = true)]
        public long TotalAmountExcludingTax { get; set; }

        /// <summary>
        /// Total tax amount paid for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>
        /// <value>Total tax amount paid for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.</value>
        /*
        <example>250</example>
        */
        [DataMember(Name = "totalTaxAmount", IsRequired = true, EmitDefaultValue = true)]
        public long TotalTaxAmount { get; set; }

        /// <summary>
        /// Tax percentage for the order line. Between 0-100. Either this or taxRate must be set.
        /// </summary>
        /// <value>Tax percentage for the order line. Between 0-100. Either this or taxRate must be set.</value>
        /*
        <example>25</example>
        */
        [DataMember(Name = "taxPercentage", EmitDefaultValue = true)]
        [Obsolete]
        public int? TaxPercentage { get; set; }

        /// <summary>
        /// Tax percentage for the order line, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000. Either this or taxPercentage must be set.
        /// </summary>
        /// <value>Tax percentage for the order line, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000. Either this or taxPercentage must be set.</value>
        /*
        <example>2500</example>
        */
        [DataMember(Name = "taxRate", EmitDefaultValue = true)]
        public int? TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets UnitInfo
        /// </summary>
        [DataMember(Name = "unitInfo", EmitDefaultValue = false)]
        public UnitInfo UnitInfo { get; set; }

        /// <summary>
        /// Total discount for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 1.00 EUR/NOK/DKK should be written as 100.
        /// </summary>
        /// <value>Total discount for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 1.00 EUR/NOK/DKK should be written as 100.</value>
        /*
        <example>2000</example>
        */
        [DataMember(Name = "discount", EmitDefaultValue = true)]
        public long? Discount { get; set; }

        /// <summary>
        /// Optional URL linking back to the product at the merchant.
        /// </summary>
        /// <value>Optional URL linking back to the product at the merchant.</value>
        /*
        <example>https://example.com/store/socks</example>
        */
        [DataMember(Name = "productUrl", EmitDefaultValue = true)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Flag for marking the order line as returned. This will make it count negative towards all the sums in bottomLine.
        /// </summary>
        /// <value>Flag for marking the order line as returned. This will make it count negative towards all the sums in bottomLine.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "isReturn", EmitDefaultValue = true)]
        public bool? IsReturn { get; set; }

        /// <summary>
        /// Flag for marking the order line as a shipping line. This will be shown differently in the app.
        /// </summary>
        /// <value>Flag for marking the order line as a shipping line. This will be shown differently in the app.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "isShipping", EmitDefaultValue = true)]
        public bool? IsShipping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderLine {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalAmountExcludingTax: ").Append(TotalAmountExcludingTax).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  UnitInfo: ").Append(UnitInfo).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  ProductUrl: ").Append(ProductUrl).Append("\n");
            sb.Append("  IsReturn: ").Append(IsReturn).Append("\n");
            sb.Append("  IsShipping: ").Append(IsShipping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TaxPercentage (int?) maximum
            if (this.TaxPercentage > (int?)100)
            {
                yield return new ValidationResult("Invalid value for TaxPercentage, must be a value less than or equal to 100.", new [] { "TaxPercentage" });
            }

            // TaxPercentage (int?) minimum
            if (this.TaxPercentage < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TaxPercentage, must be a value greater than or equal to 0.", new [] { "TaxPercentage" });
            }

            // TaxRate (int?) maximum
            if (this.TaxRate > (int?)10000)
            {
                yield return new ValidationResult("Invalid value for TaxRate, must be a value less than or equal to 10000.", new [] { "TaxRate" });
            }

            // TaxRate (int?) minimum
            if (this.TaxRate < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TaxRate, must be a value greater than or equal to 0.", new [] { "TaxRate" });
            }

            // Discount (long?) minimum
            if (this.Discount < (long?)0)
            {
                yield return new ValidationResult("Invalid value for Discount, must be a value greater than or equal to 0.", new [] { "Discount" });
            }

            yield break;
        }
    }

}
