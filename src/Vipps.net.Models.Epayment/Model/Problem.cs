/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// The standard error object, based on RFC 7808. See https://developer.vippsmobilepay.com/docs/knowledge-base/errors
    /// </summary>
    [DataContract(Name = "Problem")]
    public partial class Problem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Problem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Problem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Problem" /> class.
        /// </summary>
        /// <param name="type">A URI reference that identifies the problem type. (required).</param>
        /// <param name="title">A short, human-readable summary of the problem type. It will not change from occurrence to occurrence of the problem. (required).</param>
        /// <param name="detail">A human-readable explanation specific to this occurrence of the problem..</param>
        /// <param name="status">The HTTP response code. (required).</param>
        /// <param name="traceId">An id that can be used to facilitate in tracing the error. (required).</param>
        /// <param name="extraDetails">extraDetails.</param>
        public Problem(string type = default(string), string title = default(string), string detail = default(string), int status = default(int), string traceId = default(string), List<ExtraDetail> extraDetails = default(List<ExtraDetail>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Problem and cannot be null");
            }
            this.Type = type;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for Problem and cannot be null");
            }
            this.Title = title;
            this.Status = status;
            // to ensure "traceId" is required (not null)
            if (traceId == null)
            {
                throw new ArgumentNullException("traceId is a required property for Problem and cannot be null");
            }
            this.TraceId = traceId;
            this.Detail = detail;
            this.ExtraDetails = extraDetails;
        }

        /// <summary>
        /// A URI reference that identifies the problem type.
        /// </summary>
        /// <value>A URI reference that identifies the problem type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type. It will not change from occurrence to occurrence of the problem.
        /// </summary>
        /// <value>A short, human-readable summary of the problem type. It will not change from occurrence to occurrence of the problem.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        /// <value>A human-readable explanation specific to this occurrence of the problem.</value>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public string Detail { get; set; }

        /// <summary>
        /// The HTTP response code.
        /// </summary>
        /// <value>The HTTP response code.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public int Status { get; set; }

        /// <summary>
        /// An id that can be used to facilitate in tracing the error.
        /// </summary>
        /// <value>An id that can be used to facilitate in tracing the error.</value>
        [DataMember(Name = "traceId", IsRequired = true, EmitDefaultValue = true)]
        public string TraceId { get; set; }

        /// <summary>
        /// Gets or Sets ExtraDetails
        /// </summary>
        [DataMember(Name = "extraDetails", EmitDefaultValue = true)]
        public List<ExtraDetail> ExtraDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Problem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  ExtraDetails: ").Append(ExtraDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
