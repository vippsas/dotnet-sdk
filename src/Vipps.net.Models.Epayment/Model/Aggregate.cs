/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Aggregate
    /// </summary>
    [DataContract(Name = "Aggregate")]
    public partial class Aggregate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Aggregate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Aggregate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Aggregate" /> class.
        /// </summary>
        /// <param name="authorizedAmount">authorizedAmount (required).</param>
        /// <param name="cancelledAmount">cancelledAmount (required).</param>
        /// <param name="capturedAmount">capturedAmount (required).</param>
        /// <param name="refundedAmount">refundedAmount (required).</param>
        public Aggregate(Amount authorizedAmount = default(Amount), Amount cancelledAmount = default(Amount), Amount capturedAmount = default(Amount), Amount refundedAmount = default(Amount))
        {
            // to ensure "authorizedAmount" is required (not null)
            if (authorizedAmount == null)
            {
                throw new ArgumentNullException("authorizedAmount is a required property for Aggregate and cannot be null");
            }
            this.AuthorizedAmount = authorizedAmount;
            // to ensure "cancelledAmount" is required (not null)
            if (cancelledAmount == null)
            {
                throw new ArgumentNullException("cancelledAmount is a required property for Aggregate and cannot be null");
            }
            this.CancelledAmount = cancelledAmount;
            // to ensure "capturedAmount" is required (not null)
            if (capturedAmount == null)
            {
                throw new ArgumentNullException("capturedAmount is a required property for Aggregate and cannot be null");
            }
            this.CapturedAmount = capturedAmount;
            // to ensure "refundedAmount" is required (not null)
            if (refundedAmount == null)
            {
                throw new ArgumentNullException("refundedAmount is a required property for Aggregate and cannot be null");
            }
            this.RefundedAmount = refundedAmount;
        }

        /// <summary>
        /// Gets or Sets AuthorizedAmount
        /// </summary>
        [DataMember(Name = "authorizedAmount", IsRequired = true, EmitDefaultValue = true)]
        public Amount AuthorizedAmount { get; set; }

        /// <summary>
        /// Gets or Sets CancelledAmount
        /// </summary>
        [DataMember(Name = "cancelledAmount", IsRequired = true, EmitDefaultValue = true)]
        public Amount CancelledAmount { get; set; }

        /// <summary>
        /// Gets or Sets CapturedAmount
        /// </summary>
        [DataMember(Name = "capturedAmount", IsRequired = true, EmitDefaultValue = true)]
        public Amount CapturedAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundedAmount
        /// </summary>
        [DataMember(Name = "refundedAmount", IsRequired = true, EmitDefaultValue = true)]
        public Amount RefundedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Aggregate {\n");
            sb.Append("  AuthorizedAmount: ").Append(AuthorizedAmount).Append("\n");
            sb.Append("  CancelledAmount: ").Append(CancelledAmount).Append("\n");
            sb.Append("  CapturedAmount: ").Append(CapturedAmount).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
