/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// The customer&#39;s phone number, if available.  **Please note:** The phone number (and QR code) is optional and should only be sent if it is already known. Users should never be asked for the phone number, as they will either be automatically app-switched to the Vipps or MobilePay app, or they will be presented with the landing page. The exception for this is \&quot;manual POS\&quot; integration, where the cashier asks the customer for the number, and then enters it manually on the POS.  If the customer&#39;s phone number is needed by the merchant, use &#x60;scope&#x60; and the [Userinfo API](https://developer.vippsmobilepay.com/docs/APIs/userinfo-api/). See also [Landing page](https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/).
    /// </summary>
    [DataContract(Name = "CustomerPhoneNumber")]
    public partial class CustomerPhoneNumber : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerPhoneNumber" /> class.
        /// </summary>
        /// <param name="phoneNumber">The phone number of the user paying the transaction with Vipps MobilePay. The format is MSISDN: Digits only: Country code and subscriber number, but no prefix. If the phone number is a Norwegian phone number &#x60;(+47) 91 23 45 67&#x60;, the MSISDN representation is &#x60;4712345678&#x60;. See: https://en.wikipedia.org/wiki/MSISDN.</param>
        public CustomerPhoneNumber(string phoneNumber = default(string))
        {
            this.PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// The phone number of the user paying the transaction with Vipps MobilePay. The format is MSISDN: Digits only: Country code and subscriber number, but no prefix. If the phone number is a Norwegian phone number &#x60;(+47) 91 23 45 67&#x60;, the MSISDN representation is &#x60;4712345678&#x60;. See: https://en.wikipedia.org/wiki/MSISDN
        /// </summary>
        /// <value>The phone number of the user paying the transaction with Vipps MobilePay. The format is MSISDN: Digits only: Country code and subscriber number, but no prefix. If the phone number is a Norwegian phone number &#x60;(+47) 91 23 45 67&#x60;, the MSISDN representation is &#x60;4712345678&#x60;. See: https://en.wikipedia.org/wiki/MSISDN</value>
        /*
        <example>4712345678</example>
        */
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerPhoneNumber {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 15)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 15.", new [] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 10)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be greater than 10.", new [] { "PhoneNumber" });
            }

            if (this.PhoneNumber != null) {
                // PhoneNumber (string) pattern
                Regex regexPhoneNumber = new Regex(@"^\d{10,15}$", RegexOptions.CultureInvariant);
                if (!regexPhoneNumber.Match(this.PhoneNumber).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, must match a pattern of " + regexPhoneNumber, new [] { "PhoneNumber" });
                }
            }

            yield break;
        }
    }

}
