/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Optional setting that is only applicable when &#x60;userFlow&#x60; is set to &#x60;QR&#x60;. This is used to set the format for the QR code.
    /// </summary>
    [DataContract(Name = "CreatePaymentRequest_qrFormat")]
    public partial class CreatePaymentRequestQrFormat : IValidatableObject
    {
        /// <summary>
        /// If &#x60;userFlow&#x60; is &#x60;QR&#x60; and &#x60;qrFormat&#x60; is not set, the QR code image will be returned as &#x60;SVG+XML&#x60;, by default.
        /// </summary>
        /// <value>If &#x60;userFlow&#x60; is &#x60;QR&#x60; and &#x60;qrFormat&#x60; is not set, the QR code image will be returned as &#x60;SVG+XML&#x60;, by default.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum TEXTTARGETURL for value: TEXT/TARGETURL
            /// </summary>
            [EnumMember(Value = "TEXT/TARGETURL")]
            TEXTTARGETURL = 1,

            /// <summary>
            /// Enum IMAGESVGXML for value: IMAGE/SVG+XML
            /// </summary>
            [EnumMember(Value = "IMAGE/SVG+XML")]
            IMAGESVGXML = 2,

            /// <summary>
            /// Enum IMAGEPNG for value: IMAGE/PNG
            /// </summary>
            [EnumMember(Value = "IMAGE/PNG")]
            IMAGEPNG = 3
        }


        /// <summary>
        /// If &#x60;userFlow&#x60; is &#x60;QR&#x60; and &#x60;qrFormat&#x60; is not set, the QR code image will be returned as &#x60;SVG+XML&#x60;, by default.
        /// </summary>
        /// <value>If &#x60;userFlow&#x60; is &#x60;QR&#x60; and &#x60;qrFormat&#x60; is not set, the QR code image will be returned as &#x60;SVG+XML&#x60;, by default.</value>
        /*
        <example>IMAGE/SVG+XML</example>
        */
        [DataMember(Name = "format", IsRequired = true, EmitDefaultValue = true)]
        public FormatEnum Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentRequestQrFormat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePaymentRequestQrFormat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentRequestQrFormat" /> class.
        /// </summary>
        /// <param name="format">If &#x60;userFlow&#x60; is &#x60;QR&#x60; and &#x60;qrFormat&#x60; is not set, the QR code image will be returned as &#x60;SVG+XML&#x60;, by default. (required) (default to FormatEnum.IMAGESVGXML).</param>
        /// <param name="size">For example, if the value is 200, then 200x200 px is set as the dimension for the QR code. This is only applicable when the format is set to &#x60;PNG&#x60;. If not set, the default is 1024..</param>
        public CreatePaymentRequestQrFormat(FormatEnum format = FormatEnum.IMAGESVGXML, int? size = default(int?))
        {
            this.Format = format;
            this.Size = size;
        }

        /// <summary>
        /// For example, if the value is 200, then 200x200 px is set as the dimension for the QR code. This is only applicable when the format is set to &#x60;PNG&#x60;. If not set, the default is 1024.
        /// </summary>
        /// <value>For example, if the value is 200, then 200x200 px is set as the dimension for the QR code. This is only applicable when the format is set to &#x60;PNG&#x60;. If not set, the default is 1024.</value>
        /*
        <example>1024</example>
        */
        [DataMember(Name = "size", EmitDefaultValue = true)]
        public int? Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePaymentRequestQrFormat {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Size (int?) maximum
            if (this.Size > (int?)2000)
            {
                yield return new ValidationResult("Invalid value for Size, must be a value less than or equal to 2000.", new [] { "Size" });
            }

            // Size (int?) minimum
            if (this.Size < (int?)100)
            {
                yield return new ValidationResult("Invalid value for Size, must be a value greater than or equal to 100.", new [] { "Size" });
            }

            yield break;
        }
    }

}
