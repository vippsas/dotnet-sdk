/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="city">city (required).</param>
        /// <param name="country">Country code according to ISO 3166-2 (two capital letters). (required).</param>
        /// <param name="id">Unique ID of the address, always provided in response from Vipps MobilePay..</param>
        /// <param name="lines">Array of addressLines, for example street name, number, etc. (required).</param>
        /// <param name="postCode">Postcode of the address in local country format. (required).</param>
        public Address(string city = default(string), string country = default(string), Guid id = default(Guid), List<string> lines = default(List<string>), string postCode = default(string))
        {
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Address and cannot be null");
            }
            this.City = city;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for Address and cannot be null");
            }
            this.Country = country;
            // to ensure "lines" is required (not null)
            if (lines == null)
            {
                throw new ArgumentNullException("lines is a required property for Address and cannot be null");
            }
            this.Lines = lines;
            // to ensure "postCode" is required (not null)
            if (postCode == null)
            {
                throw new ArgumentNullException("postCode is a required property for Address and cannot be null");
            }
            this.PostCode = postCode;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        /*
        <example>Oslo</example>
        */
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Country code according to ISO 3166-2 (two capital letters).
        /// </summary>
        /// <value>Country code according to ISO 3166-2 (two capital letters).</value>
        /*
        <example>NO</example>
        */
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Unique ID of the address, always provided in response from Vipps MobilePay.
        /// </summary>
        /// <value>Unique ID of the address, always provided in response from Vipps MobilePay.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Array of addressLines, for example street name, number, etc.
        /// </summary>
        /// <value>Array of addressLines, for example street name, number, etc.</value>
        [DataMember(Name = "lines", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Lines { get; set; }

        /// <summary>
        /// Postcode of the address in local country format.
        /// </summary>
        /// <value>Postcode of the address in local country format.</value>
        /*
        <example>0154</example>
        */
        [DataMember(Name = "postCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Country != null) {
                // Country (string) pattern
                Regex regexCountry = new Regex(@"^[A-Z]{2}$", RegexOptions.CultureInvariant);
                if (!regexCountry.Match(this.Country).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, must match a pattern of " + regexCountry, new [] { "Country" });
                }
            }

            yield break;
        }
    }

}
