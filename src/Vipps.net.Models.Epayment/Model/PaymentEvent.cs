/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// PaymentEvent
    /// </summary>
    [DataContract(Name = "PaymentEvent")]
    public partial class PaymentEvent : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public PaymentEventName? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentEvent" /> class.
        /// </summary>
        /// <param name="reference">The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/). (required).</param>
        /// <param name="pspReference">Reference value for a payment, defined by Vipps MobilePay. (required).</param>
        /// <param name="name">name.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="idempotencyKey">The idempotency key of the request. Specified by the merchant/partner making the API request..</param>
        /// <param name="success">The outcome of the event (required).</param>
        public PaymentEvent(string reference = default(string), string pspReference = default(string), PaymentEventName? name = default(PaymentEventName?), Amount amount = default(Amount), DateTime timestamp = default(DateTime), string idempotencyKey = default(string), bool success = default(bool))
        {
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for PaymentEvent and cannot be null");
            }
            this.Reference = reference;
            // to ensure "pspReference" is required (not null)
            if (pspReference == null)
            {
                throw new ArgumentNullException("pspReference is a required property for PaymentEvent and cannot be null");
            }
            this.PspReference = pspReference;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for PaymentEvent and cannot be null");
            }
            this.Amount = amount;
            this.Timestamp = timestamp;
            this.Success = success;
            this.Name = name;
            this.IdempotencyKey = idempotencyKey;
        }

        /// <summary>
        /// The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/).
        /// </summary>
        /// <value>The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/).</value>
        /*
        <example>acme-shop-123-order123abc</example>
        */
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Reference value for a payment, defined by Vipps MobilePay.
        /// </summary>
        /// <value>Reference value for a payment, defined by Vipps MobilePay.</value>
        [DataMember(Name = "pspReference", IsRequired = true, EmitDefaultValue = true)]
        public string PspReference { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        /*
        <example>2022-12-31T00:00Z</example>
        */
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// The idempotency key of the request. Specified by the merchant/partner making the API request.
        /// </summary>
        /// <value>The idempotency key of the request. Specified by the merchant/partner making the API request.</value>
        /*
        <example>fb492b5e-7907-4d83-ba20-c7fb60ca35de</example>
        */
        [DataMember(Name = "idempotencyKey", EmitDefaultValue = true)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// The outcome of the event
        /// </summary>
        /// <value>The outcome of the event</value>
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentEvent {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  IdempotencyKey: ").Append(IdempotencyKey).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 50.", new [] { "Reference" });
            }

            // Reference (string) minLength
            if (this.Reference != null && this.Reference.Length < 8)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be greater than 8.", new [] { "Reference" });
            }

            if (this.Reference != null) {
                // Reference (string) pattern
                Regex regexReference = new Regex(@"^[a-zA-Z0-9-]{8,50}$", RegexOptions.CultureInvariant);
                if (!regexReference.Match(this.Reference).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, must match a pattern of " + regexReference, new [] { "Reference" });
                }
            }

            // IdempotencyKey (string) maxLength
            if (this.IdempotencyKey != null && this.IdempotencyKey.Length > 50)
            {
                yield return new ValidationResult("Invalid value for IdempotencyKey, length must be less than 50.", new [] { "IdempotencyKey" });
            }

            yield break;
        }
    }

}
