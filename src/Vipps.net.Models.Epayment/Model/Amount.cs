/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Amount object, containing a &#x60;value&#x60; and a &#x60;currency&#x60;.
    /// </summary>
    [DataContract(Name = "Amount")]
    public partial class Amount : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public Currency Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Amount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Amount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Amount" /> class.
        /// </summary>
        /// <param name="currency">currency (required).</param>
        /// <param name="value">Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 NOK should be written as 1000. The minimum amounts allowed are NOK 100 øre, DKK 1 øre, EUR 1 cent. (required).</param>
        public Amount(Currency currency = default(Currency), long value = default(long))
        {
            this.Currency = currency;
            this.Value = value;
        }

        /// <summary>
        /// Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 NOK should be written as 1000. The minimum amounts allowed are NOK 100 øre, DKK 1 øre, EUR 1 cent.
        /// </summary>
        /// <value>Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 NOK should be written as 1000. The minimum amounts allowed are NOK 100 øre, DKK 1 øre, EUR 1 cent.</value>
        /*
        <example>49900</example>
        */
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public long Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Amount {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (long) maximum
            if (this.Value > (long)65000000)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value less than or equal to 65000000.", new [] { "Value" });
            }

            // Value (long) minimum
            if (this.Value < (long)0)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.", new [] { "Value" });
            }

            yield break;
        }
    }

}
