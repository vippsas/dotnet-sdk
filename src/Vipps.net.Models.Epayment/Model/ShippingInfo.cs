/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Deprecated, use a regular orderLine with \&quot;isShipping\&quot; flag. Using this will result in faulty calculation of sum and tax.
    /// </summary>
    [DataContract(Name = "ShippingInfo")]
    public partial class ShippingInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingInfo" /> class.
        /// </summary>
        /// <param name="amount">Total amount for the shipping, including tax and discount (required).</param>
        /// <param name="amountExcludingTax">Total amount for shipping excluding tax (required).</param>
        /// <param name="taxAmount">Total tax amount paid for the shipping (required).</param>
        /// <param name="taxPercentage">Tax-percentage for the Shipping (required).</param>
        public ShippingInfo(long? amount = default(long?), long? amountExcludingTax = default(long?), long? taxAmount = default(long?), int? taxPercentage = default(int?))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for ShippingInfo and cannot be null");
            }
            this.Amount = amount;
            // to ensure "amountExcludingTax" is required (not null)
            if (amountExcludingTax == null)
            {
                throw new ArgumentNullException("amountExcludingTax is a required property for ShippingInfo and cannot be null");
            }
            this.AmountExcludingTax = amountExcludingTax;
            // to ensure "taxAmount" is required (not null)
            if (taxAmount == null)
            {
                throw new ArgumentNullException("taxAmount is a required property for ShippingInfo and cannot be null");
            }
            this.TaxAmount = taxAmount;
            // to ensure "taxPercentage" is required (not null)
            if (taxPercentage == null)
            {
                throw new ArgumentNullException("taxPercentage is a required property for ShippingInfo and cannot be null");
            }
            this.TaxPercentage = taxPercentage;
        }

        /// <summary>
        /// Total amount for the shipping, including tax and discount
        /// </summary>
        /// <value>Total amount for the shipping, including tax and discount</value>
        /*
        <example>1000</example>
        */
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public long? Amount { get; set; }

        /// <summary>
        /// Total amount for shipping excluding tax
        /// </summary>
        /// <value>Total amount for shipping excluding tax</value>
        /*
        <example>1000</example>
        */
        [DataMember(Name = "amountExcludingTax", IsRequired = true, EmitDefaultValue = true)]
        public long? AmountExcludingTax { get; set; }

        /// <summary>
        /// Total tax amount paid for the shipping
        /// </summary>
        /// <value>Total tax amount paid for the shipping</value>
        /*
        <example>250</example>
        */
        [DataMember(Name = "taxAmount", IsRequired = true, EmitDefaultValue = true)]
        public long? TaxAmount { get; set; }

        /// <summary>
        /// Tax-percentage for the Shipping
        /// </summary>
        /// <value>Tax-percentage for the Shipping</value>
        /*
        <example>25</example>
        */
        [DataMember(Name = "taxPercentage", IsRequired = true, EmitDefaultValue = true)]
        public int? TaxPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingInfo {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountExcludingTax: ").Append(AmountExcludingTax).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Amount (long?) minimum
            if (this.Amount < (long?)0)
            {
                yield return new ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.", new [] { "Amount" });
            }

            // AmountExcludingTax (long?) minimum
            if (this.AmountExcludingTax < (long?)0)
            {
                yield return new ValidationResult("Invalid value for AmountExcludingTax, must be a value greater than or equal to 0.", new [] { "AmountExcludingTax" });
            }

            // TaxAmount (long?) minimum
            if (this.TaxAmount < (long?)0)
            {
                yield return new ValidationResult("Invalid value for TaxAmount, must be a value greater than or equal to 0.", new [] { "TaxAmount" });
            }

            // TaxPercentage (int?) maximum
            if (this.TaxPercentage > (int?)100)
            {
                yield return new ValidationResult("Invalid value for TaxPercentage, must be a value less than or equal to 100.", new [] { "TaxPercentage" });
            }

            // TaxPercentage (int?) minimum
            if (this.TaxPercentage < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TaxPercentage, must be a value greater than or equal to 0.", new [] { "TaxPercentage" });
            }

            yield break;
        }
    }

}
