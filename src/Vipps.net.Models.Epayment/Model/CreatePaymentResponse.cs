/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// The &#x60;CreatePaymentResponse&#x60; object.
    /// </summary>
    [DataContract(Name = "CreatePaymentResponse")]
    public partial class CreatePaymentResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePaymentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentResponse" /> class.
        /// </summary>
        /// <param name="redirectUrl">The URL to which the user is redirected when continuing the payment for &#x60;NATIVE_REDIRECT&#x60; and &#x60;WEB_REDIRECT&#x60;. When &#x60;userFlow&#x60; is &#x60;QR&#x60;, a link to the QR image (or the target URL) will be returned. Nothing will be returned when &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;..</param>
        /// <param name="reference">The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/). (required).</param>
        public CreatePaymentResponse(string redirectUrl = default(string), string reference = default(string))
        {
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for CreatePaymentResponse and cannot be null");
            }
            this.Reference = reference;
            this.RedirectUrl = redirectUrl;
        }

        /// <summary>
        /// The URL to which the user is redirected when continuing the payment for &#x60;NATIVE_REDIRECT&#x60; and &#x60;WEB_REDIRECT&#x60;. When &#x60;userFlow&#x60; is &#x60;QR&#x60;, a link to the QR image (or the target URL) will be returned. Nothing will be returned when &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;.
        /// </summary>
        /// <value>The URL to which the user is redirected when continuing the payment for &#x60;NATIVE_REDIRECT&#x60; and &#x60;WEB_REDIRECT&#x60;. When &#x60;userFlow&#x60; is &#x60;QR&#x60;, a link to the QR image (or the target URL) will be returned. Nothing will be returned when &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;.</value>
        /*
        <example>https://landing.vipps.no?token&#x3D;abc123</example>
        */
        [DataMember(Name = "redirectUrl", EmitDefaultValue = false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/).
        /// </summary>
        /// <value>The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/).</value>
        /*
        <example>acme-shop-123-order123abc</example>
        */
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePaymentResponse {\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 50.", new [] { "Reference" });
            }

            // Reference (string) minLength
            if (this.Reference != null && this.Reference.Length < 8)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be greater than 8.", new [] { "Reference" });
            }

            if (this.Reference != null) {
                // Reference (string) pattern
                Regex regexReference = new Regex(@"^[a-zA-Z0-9-]{8,50}$", RegexOptions.CultureInvariant);
                if (!regexReference.Match(this.Reference).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, must match a pattern of " + regexReference, new [] { "Reference" });
                }
            }

            yield break;
        }
    }

}
