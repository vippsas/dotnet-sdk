/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// Optional. If no quantity info is provided the order line will default to 1 pcs
    /// </summary>
    [DataContract(Name = "UnitInfo")]
    public partial class UnitInfo : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QuantityUnit
        /// </summary>
        [DataMember(Name = "quantityUnit", EmitDefaultValue = true)]
        public QuantityUnitEnum? QuantityUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnitInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitInfo" /> class.
        /// </summary>
        /// <param name="unitPrice">Total price per unit, including tax and excluding discount (required).</param>
        /// <param name="quantity">Quantity given as a integer or fraction (only for cosmetics) (required).</param>
        /// <param name="quantityUnit">quantityUnit.</param>
        public UnitInfo(long? unitPrice = default(long?), string quantity = default(string), QuantityUnitEnum? quantityUnit = default(QuantityUnitEnum?))
        {
            // to ensure "unitPrice" is required (not null)
            if (unitPrice == null)
            {
                throw new ArgumentNullException("unitPrice is a required property for UnitInfo and cannot be null");
            }
            this.UnitPrice = unitPrice;
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new ArgumentNullException("quantity is a required property for UnitInfo and cannot be null");
            }
            this.Quantity = quantity;
            this.QuantityUnit = quantityUnit;
        }

        /// <summary>
        /// Total price per unit, including tax and excluding discount
        /// </summary>
        /// <value>Total price per unit, including tax and excluding discount</value>
        [DataMember(Name = "unitPrice", IsRequired = true, EmitDefaultValue = true)]
        public long? UnitPrice { get; set; }

        /// <summary>
        /// Quantity given as a integer or fraction (only for cosmetics)
        /// </summary>
        /// <value>Quantity given as a integer or fraction (only for cosmetics)</value>
        /*
        <example>0.822</example>
        */
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public string Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnitInfo {\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityUnit: ").Append(QuantityUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnitPrice (long?) minimum
            if (this.UnitPrice < (long?)0)
            {
                yield return new ValidationResult("Invalid value for UnitPrice, must be a value greater than or equal to 0.", new [] { "UnitPrice" });
            }

            // Quantity (string) maxLength
            if (this.Quantity != null && this.Quantity.Length > 10)
            {
                yield return new ValidationResult("Invalid value for Quantity, length must be less than 10.", new [] { "Quantity" });
            }

            if (this.Quantity != null) {
                // Quantity (string) pattern
                Regex regexQuantity = new Regex(@"^\d+([\.]\d{1,8})?$", RegexOptions.CultureInvariant);
                if (!regexQuantity.Match(this.Quantity).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must match a pattern of " + regexQuantity, new [] { "Quantity" });
                }
            }

            yield break;
        }
    }

}
