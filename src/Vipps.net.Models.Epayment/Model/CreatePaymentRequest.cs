/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Epayment.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Epayment.Model
{
    /// <summary>
    /// The &#x60;CreatePaymentRequest&#x60; object.
    /// </summary>
    [DataContract(Name = "CreatePaymentRequest")]
    public partial class CreatePaymentRequest : IValidatableObject
    {
        /// <summary>
        /// The type of customer interaction that triggers the purchase. &#x60;CUSTOMER_PRESENT&#x60; means that the customer is physically present at the point of sale when the payment is made, typically in a store.
        /// </summary>
        /// <value>The type of customer interaction that triggers the purchase. &#x60;CUSTOMER_PRESENT&#x60; means that the customer is physically present at the point of sale when the payment is made, typically in a store.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerInteractionEnum
        {
            /// <summary>
            /// Enum CUSTOMER_PRESENT for value: CUSTOMER_PRESENT
            /// </summary>
            [EnumMember(Value = "CUSTOMER_PRESENT")]
            CUSTOMER_PRESENT = 1,

            /// <summary>
            /// Enum CUSTOMER_NOT_PRESENT for value: CUSTOMER_NOT_PRESENT
            /// </summary>
            [EnumMember(Value = "CUSTOMER_NOT_PRESENT")]
            CUSTOMER_NOT_PRESENT = 2
        }


        /// <summary>
        /// The type of customer interaction that triggers the purchase. &#x60;CUSTOMER_PRESENT&#x60; means that the customer is physically present at the point of sale when the payment is made, typically in a store.
        /// </summary>
        /// <value>The type of customer interaction that triggers the purchase. &#x60;CUSTOMER_PRESENT&#x60; means that the customer is physically present at the point of sale when the payment is made, typically in a store.</value>
        /*
        <example>CUSTOMER_NOT_PRESENT</example>
        */
        [DataMember(Name = "customerInteraction", EmitDefaultValue = false)]
        public CustomerInteractionEnum? CustomerInteraction { get; set; }
        /// <summary>
        /// The flow for bringing the user to the Vipps or MobilePay app&#39;s payment confirmation screen. If &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;, a valid value for &#x60;customer&#x60; is required. If &#x60;userFlow&#x60; is &#x60;WEB_REDIRECT&#x60;, a valid value for &#x60;returnUrl&#x60; is required. &#x60;WEB_REDIRECT&#x60; is the normal flow for browser-based payment flows.  If on a mobile device, the Vipps or MobilePay app will open. A valid value for &#x60;returnUrl&#x60; is required. Otherwise, the [landing page](https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/) will open. &#x60;NATIVE_REDIRECT&#x60; is for automatic app-switch between the merchant&#39;s native app and the Vipps or MobilePay app. &#x60;PUSH_MESSAGE&#x60; is to skip the landing page for payments initiated on a device other than the user&#39;s phone. The user gets a push message that opens the payment in the app. This requires a valid &#x60;customer&#x60; field. &#x60;QR&#x60; returns a QR code that can be scanned to complete the payment.
        /// </summary>
        /// <value>The flow for bringing the user to the Vipps or MobilePay app&#39;s payment confirmation screen. If &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;, a valid value for &#x60;customer&#x60; is required. If &#x60;userFlow&#x60; is &#x60;WEB_REDIRECT&#x60;, a valid value for &#x60;returnUrl&#x60; is required. &#x60;WEB_REDIRECT&#x60; is the normal flow for browser-based payment flows.  If on a mobile device, the Vipps or MobilePay app will open. A valid value for &#x60;returnUrl&#x60; is required. Otherwise, the [landing page](https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/) will open. &#x60;NATIVE_REDIRECT&#x60; is for automatic app-switch between the merchant&#39;s native app and the Vipps or MobilePay app. &#x60;PUSH_MESSAGE&#x60; is to skip the landing page for payments initiated on a device other than the user&#39;s phone. The user gets a push message that opens the payment in the app. This requires a valid &#x60;customer&#x60; field. &#x60;QR&#x60; returns a QR code that can be scanned to complete the payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserFlowEnum
        {
            /// <summary>
            /// Enum PUSH_MESSAGE for value: PUSH_MESSAGE
            /// </summary>
            [EnumMember(Value = "PUSH_MESSAGE")]
            PUSH_MESSAGE = 1,

            /// <summary>
            /// Enum NATIVE_REDIRECT for value: NATIVE_REDIRECT
            /// </summary>
            [EnumMember(Value = "NATIVE_REDIRECT")]
            NATIVE_REDIRECT = 2,

            /// <summary>
            /// Enum WEB_REDIRECT for value: WEB_REDIRECT
            /// </summary>
            [EnumMember(Value = "WEB_REDIRECT")]
            WEB_REDIRECT = 3,

            /// <summary>
            /// Enum QR for value: QR
            /// </summary>
            [EnumMember(Value = "QR")]
            QR = 4
        }


        /// <summary>
        /// The flow for bringing the user to the Vipps or MobilePay app&#39;s payment confirmation screen. If &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;, a valid value for &#x60;customer&#x60; is required. If &#x60;userFlow&#x60; is &#x60;WEB_REDIRECT&#x60;, a valid value for &#x60;returnUrl&#x60; is required. &#x60;WEB_REDIRECT&#x60; is the normal flow for browser-based payment flows.  If on a mobile device, the Vipps or MobilePay app will open. A valid value for &#x60;returnUrl&#x60; is required. Otherwise, the [landing page](https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/) will open. &#x60;NATIVE_REDIRECT&#x60; is for automatic app-switch between the merchant&#39;s native app and the Vipps or MobilePay app. &#x60;PUSH_MESSAGE&#x60; is to skip the landing page for payments initiated on a device other than the user&#39;s phone. The user gets a push message that opens the payment in the app. This requires a valid &#x60;customer&#x60; field. &#x60;QR&#x60; returns a QR code that can be scanned to complete the payment.
        /// </summary>
        /// <value>The flow for bringing the user to the Vipps or MobilePay app&#39;s payment confirmation screen. If &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;, a valid value for &#x60;customer&#x60; is required. If &#x60;userFlow&#x60; is &#x60;WEB_REDIRECT&#x60;, a valid value for &#x60;returnUrl&#x60; is required. &#x60;WEB_REDIRECT&#x60; is the normal flow for browser-based payment flows.  If on a mobile device, the Vipps or MobilePay app will open. A valid value for &#x60;returnUrl&#x60; is required. Otherwise, the [landing page](https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/) will open. &#x60;NATIVE_REDIRECT&#x60; is for automatic app-switch between the merchant&#39;s native app and the Vipps or MobilePay app. &#x60;PUSH_MESSAGE&#x60; is to skip the landing page for payments initiated on a device other than the user&#39;s phone. The user gets a push message that opens the payment in the app. This requires a valid &#x60;customer&#x60; field. &#x60;QR&#x60; returns a QR code that can be scanned to complete the payment.</value>
        /*
        <example>NATIVE_REDIRECT</example>
        */
        [DataMember(Name = "userFlow", IsRequired = true, EmitDefaultValue = true)]
        public UserFlowEnum UserFlow { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentRequest" /> class.
        /// </summary>
        /// <param name="amount">amount (required).</param>
        /// <param name="customer">customer.</param>
        /// <param name="minimumUserAge">Minimum age in years required for the customer to make the purchase..</param>
        /// <param name="customerInteraction">The type of customer interaction that triggers the purchase. &#x60;CUSTOMER_PRESENT&#x60; means that the customer is physically present at the point of sale when the payment is made, typically in a store. (default to CustomerInteractionEnum.CUSTOMER_NOT_PRESENT).</param>
        /// <param name="industryData">industryData.</param>
        /// <param name="paymentMethod">paymentMethod (required).</param>
        /// <param name="profile">profile.</param>
        /// <param name="reference">The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/). (required).</param>
        /// <param name="returnUrl">The URL the user is returned to after the payment session. The URL must use the &#x60;https://&#x60; scheme or a custom URL scheme..</param>
        /// <param name="userFlow">The flow for bringing the user to the Vipps or MobilePay app&#39;s payment confirmation screen. If &#x60;userFlow&#x60; is &#x60;PUSH_MESSAGE&#x60;, a valid value for &#x60;customer&#x60; is required. If &#x60;userFlow&#x60; is &#x60;WEB_REDIRECT&#x60;, a valid value for &#x60;returnUrl&#x60; is required. &#x60;WEB_REDIRECT&#x60; is the normal flow for browser-based payment flows.  If on a mobile device, the Vipps or MobilePay app will open. A valid value for &#x60;returnUrl&#x60; is required. Otherwise, the [landing page](https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/) will open. &#x60;NATIVE_REDIRECT&#x60; is for automatic app-switch between the merchant&#39;s native app and the Vipps or MobilePay app. &#x60;PUSH_MESSAGE&#x60; is to skip the landing page for payments initiated on a device other than the user&#39;s phone. The user gets a push message that opens the payment in the app. This requires a valid &#x60;customer&#x60; field. &#x60;QR&#x60; returns a QR code that can be scanned to complete the payment. (required).</param>
        /// <param name="expiresAt">The payment will expire at the given date and time. The format must adhere to RFC 3339. The value must be more than 10 minutes and less than 60 days in the future. Can only be combined with &#x60;userFlow: PUSH_MESSAGE&#x60; or &#x60;userFlow: QR&#x60;.  If &#x60;ExpiresAt&#x60; is set, &#x60;receipt&#x60; also must be set..</param>
        /// <param name="qrFormat">qrFormat.</param>
        /// <param name="paymentDescription">The payment description summary that will be provided to the user through the app, the merchant portal, and the settlement files. See the [recommendations](/docs/knowledge-base/transactiontext/)..</param>
        /// <param name="receipt">receipt.</param>
        /// <param name="metadata">Metadata is a key-value map that can be used to store additional information about the payment. The metadata is not used by Vipps MobilePay, but is passed through in the &#x60;GetPaymentResponse&#x60; object. Key length is limited to 100 characters, and value length is limited to 500 characters. Max capacity is 5 key-value pairs..</param>
        /// <param name="receiptUrl">The URL where a receipt can be viewed or downloaded. The URL must use the &#x60;https://&#x60; scheme or a custom URL scheme..</param>
        public CreatePaymentRequest(Amount amount = default(Amount), Customer customer = default(Customer), int? minimumUserAge = default(int?), CustomerInteractionEnum? customerInteraction = CustomerInteractionEnum.CUSTOMER_NOT_PRESENT, IndustryData industryData = default(IndustryData), PaymentMethod paymentMethod = default(PaymentMethod), ProfileRequest profile = default(ProfileRequest), string reference = default(string), string returnUrl = default(string), UserFlowEnum userFlow = default(UserFlowEnum), string expiresAt = default(string), CreatePaymentRequestQrFormat qrFormat = default(CreatePaymentRequestQrFormat), string paymentDescription = default(string), Receipt receipt = default(Receipt), Dictionary<string, string> metadata = default(Dictionary<string, string>), string receiptUrl = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for CreatePaymentRequest and cannot be null");
            }
            this.Amount = amount;
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new ArgumentNullException("paymentMethod is a required property for CreatePaymentRequest and cannot be null");
            }
            this.PaymentMethod = paymentMethod;
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for CreatePaymentRequest and cannot be null");
            }
            this.Reference = reference;
            this.UserFlow = userFlow;
            this.Customer = customer;
            this.MinimumUserAge = minimumUserAge;
            this.CustomerInteraction = customerInteraction;
            this.IndustryData = industryData;
            this.Profile = profile;
            this.ReturnUrl = returnUrl;
            this.ExpiresAt = expiresAt;
            this.QrFormat = qrFormat;
            this.PaymentDescription = paymentDescription;
            this.Receipt = receipt;
            this.Metadata = metadata;
            this.ReceiptUrl = receiptUrl;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Minimum age in years required for the customer to make the purchase.
        /// </summary>
        /// <value>Minimum age in years required for the customer to make the purchase.</value>
        /*
        <example>16</example>
        */
        [DataMember(Name = "minimumUserAge", EmitDefaultValue = true)]
        public int? MinimumUserAge { get; set; }

        /// <summary>
        /// Gets or Sets IndustryData
        /// </summary>
        [DataMember(Name = "industryData", EmitDefaultValue = false)]
        public IndustryData IndustryData { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", IsRequired = true, EmitDefaultValue = true)]
        public PaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public ProfileRequest Profile { get; set; }

        /// <summary>
        /// The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/).
        /// </summary>
        /// <value>The &#x60;reference&#x60; is the unique identifier for the payment, specified when initiating the payment. The reference must be unique for the sales unit (MSN), but is not _globally_ unique, so several MSNs may use the same reference. See the [recommendations](/docs/knowledge-base/orderid/).</value>
        /*
        <example>acme-shop-123-order123abc</example>
        */
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// The URL the user is returned to after the payment session. The URL must use the &#x60;https://&#x60; scheme or a custom URL scheme.
        /// </summary>
        /// <value>The URL the user is returned to after the payment session. The URL must use the &#x60;https://&#x60; scheme or a custom URL scheme.</value>
        /*
        <example>https://example.com/redirect?orderId&#x3D;acme-shop-123-order123abc</example>
        */
        [DataMember(Name = "returnUrl", EmitDefaultValue = false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// The payment will expire at the given date and time. The format must adhere to RFC 3339. The value must be more than 10 minutes and less than 60 days in the future. Can only be combined with &#x60;userFlow: PUSH_MESSAGE&#x60; or &#x60;userFlow: QR&#x60;.  If &#x60;ExpiresAt&#x60; is set, &#x60;receipt&#x60; also must be set.
        /// </summary>
        /// <value>The payment will expire at the given date and time. The format must adhere to RFC 3339. The value must be more than 10 minutes and less than 60 days in the future. Can only be combined with &#x60;userFlow: PUSH_MESSAGE&#x60; or &#x60;userFlow: QR&#x60;.  If &#x60;ExpiresAt&#x60; is set, &#x60;receipt&#x60; also must be set.</value>
        /*
        <example>2023-02-26T17:32:28Z</example>
        */
        [DataMember(Name = "expiresAt", EmitDefaultValue = true)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets QrFormat
        /// </summary>
        [DataMember(Name = "qrFormat", EmitDefaultValue = true)]
        public CreatePaymentRequestQrFormat QrFormat { get; set; }

        /// <summary>
        /// The payment description summary that will be provided to the user through the app, the merchant portal, and the settlement files. See the [recommendations](/docs/knowledge-base/transactiontext/).
        /// </summary>
        /// <value>The payment description summary that will be provided to the user through the app, the merchant portal, and the settlement files. See the [recommendations](/docs/knowledge-base/transactiontext/).</value>
        /*
        <example>Temporary reservation of maximum amount. You will only be charged for the actual use.</example>
        */
        [DataMember(Name = "paymentDescription", EmitDefaultValue = false)]
        public string PaymentDescription { get; set; }

        /// <summary>
        /// Gets or Sets Receipt
        /// </summary>
        [DataMember(Name = "receipt", EmitDefaultValue = false)]
        public Receipt Receipt { get; set; }

        /// <summary>
        /// Metadata is a key-value map that can be used to store additional information about the payment. The metadata is not used by Vipps MobilePay, but is passed through in the &#x60;GetPaymentResponse&#x60; object. Key length is limited to 100 characters, and value length is limited to 500 characters. Max capacity is 5 key-value pairs.
        /// </summary>
        /// <value>Metadata is a key-value map that can be used to store additional information about the payment. The metadata is not used by Vipps MobilePay, but is passed through in the &#x60;GetPaymentResponse&#x60; object. Key length is limited to 100 characters, and value length is limited to 500 characters. Max capacity is 5 key-value pairs.</value>
        /*
        <example>{&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;,&quot;key3&quot;:&quot;value3&quot;}</example>
        */
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// The URL where a receipt can be viewed or downloaded. The URL must use the &#x60;https://&#x60; scheme or a custom URL scheme.
        /// </summary>
        /// <value>The URL where a receipt can be viewed or downloaded. The URL must use the &#x60;https://&#x60; scheme or a custom URL scheme.</value>
        /*
        <example>https://example.com/receipt/9876543210</example>
        */
        [DataMember(Name = "receiptUrl", EmitDefaultValue = true)]
        public string ReceiptUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePaymentRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  MinimumUserAge: ").Append(MinimumUserAge).Append("\n");
            sb.Append("  CustomerInteraction: ").Append(CustomerInteraction).Append("\n");
            sb.Append("  IndustryData: ").Append(IndustryData).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  UserFlow: ").Append(UserFlow).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  QrFormat: ").Append(QrFormat).Append("\n");
            sb.Append("  PaymentDescription: ").Append(PaymentDescription).Append("\n");
            sb.Append("  Receipt: ").Append(Receipt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ReceiptUrl: ").Append(ReceiptUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MinimumUserAge (int?) maximum
            if (this.MinimumUserAge > (int?)100)
            {
                yield return new ValidationResult("Invalid value for MinimumUserAge, must be a value less than or equal to 100.", new [] { "MinimumUserAge" });
            }

            // MinimumUserAge (int?) minimum
            if (this.MinimumUserAge < (int?)0)
            {
                yield return new ValidationResult("Invalid value for MinimumUserAge, must be a value greater than or equal to 0.", new [] { "MinimumUserAge" });
            }

            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 50.", new [] { "Reference" });
            }

            // Reference (string) minLength
            if (this.Reference != null && this.Reference.Length < 8)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be greater than 8.", new [] { "Reference" });
            }

            if (this.Reference != null) {
                // Reference (string) pattern
                Regex regexReference = new Regex(@"^[a-zA-Z0-9-]{8,50}$", RegexOptions.CultureInvariant);
                if (!regexReference.Match(this.Reference).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, must match a pattern of " + regexReference, new [] { "Reference" });
                }
            }

            if (this.ExpiresAt != null) {
                // ExpiresAt (string) pattern
                Regex regexExpiresAt = new Regex(@"^((?:(\d{4}-\d{2}-\d{2})(T|t)(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|z|([+-](?:2[0-3]|[01][0-9]):[0-5][0-9])))$", RegexOptions.CultureInvariant);
                if (!regexExpiresAt.Match(this.ExpiresAt).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiresAt, must match a pattern of " + regexExpiresAt, new [] { "ExpiresAt" });
                }
            }

            // PaymentDescription (string) maxLength
            if (this.PaymentDescription != null && this.PaymentDescription.Length > 100)
            {
                yield return new ValidationResult("Invalid value for PaymentDescription, length must be less than 100.", new [] { "PaymentDescription" });
            }

            // PaymentDescription (string) minLength
            if (this.PaymentDescription != null && this.PaymentDescription.Length < 3)
            {
                yield return new ValidationResult("Invalid value for PaymentDescription, length must be greater than 3.", new [] { "PaymentDescription" });
            }

            yield break;
        }
    }

}
