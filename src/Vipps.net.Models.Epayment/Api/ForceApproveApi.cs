/*
 * ePayment API
 *
 * The ePayment API enables you to create Vipps MobilePay payments for online and in-person payments. See the [ePayment API Guide](https://developer.vippsmobilepay.com/docs/APIs/epayment-api) for more details.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Vipps.net.Models.Epayment.Client;
using Vipps.net.Models.Epayment.Model;

namespace Vipps.net.Models.Epayment.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForceApproveApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Force approve a payment
        /// </summary>
        /// <remarks>
        /// This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ForceApprove(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0);

        /// <summary>
        /// Force approve a payment
        /// </summary>
        /// <remarks>
        /// This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ForceApproveWithHttpInfo(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForceApproveApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Force approve a payment
        /// </summary>
        /// <remarks>
        /// This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ForceApproveAsync(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Force approve a payment
        /// </summary>
        /// <remarks>
        /// This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ForceApproveWithHttpInfoAsync(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForceApproveApi : IForceApproveApiSync, IForceApproveApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ForceApproveApi : IForceApproveApi
    {
        private Vipps.net.Models.Epayment.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ForceApproveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForceApproveApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForceApproveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForceApproveApi(string basePath)
        {
            this.Configuration = Vipps.net.Models.Epayment.Client.Configuration.MergeConfigurations(
                Vipps.net.Models.Epayment.Client.GlobalConfiguration.Instance,
                new Vipps.net.Models.Epayment.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Vipps.net.Models.Epayment.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vipps.net.Models.Epayment.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Vipps.net.Models.Epayment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForceApproveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ForceApproveApi(Vipps.net.Models.Epayment.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Vipps.net.Models.Epayment.Client.Configuration.MergeConfigurations(
                Vipps.net.Models.Epayment.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Vipps.net.Models.Epayment.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vipps.net.Models.Epayment.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Vipps.net.Models.Epayment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForceApproveApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ForceApproveApi(Vipps.net.Models.Epayment.Client.ISynchronousClient client, Vipps.net.Models.Epayment.Client.IAsynchronousClient asyncClient, Vipps.net.Models.Epayment.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Vipps.net.Models.Epayment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Vipps.net.Models.Epayment.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Vipps.net.Models.Epayment.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Vipps.net.Models.Epayment.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Vipps.net.Models.Epayment.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Force approve a payment This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </summary>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ForceApprove(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0)
        {
            ForceApproveWithHttpInfo(reference, merchantSerialNumber, ocpApimSubscriptionKey, forceApprove);
        }

        /// <summary>
        /// Force approve a payment This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </summary>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Vipps.net.Models.Epayment.Client.ApiResponse<Object> ForceApproveWithHttpInfo(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new Vipps.net.Models.Epayment.Client.ApiException(400, "Missing required parameter 'reference' when calling ForceApproveApi->ForceApprove");
            }

            // verify the required parameter 'merchantSerialNumber' is set
            if (merchantSerialNumber == null)
            {
                throw new Vipps.net.Models.Epayment.Client.ApiException(400, "Missing required parameter 'merchantSerialNumber' when calling ForceApproveApi->ForceApprove");
            }

            // verify the required parameter 'ocpApimSubscriptionKey' is set
            if (ocpApimSubscriptionKey == null)
            {
                throw new Vipps.net.Models.Epayment.Client.ApiException(400, "Missing required parameter 'ocpApimSubscriptionKey' when calling ForceApproveApi->ForceApprove");
            }

            Vipps.net.Models.Epayment.Client.RequestOptions localVarRequestOptions = new Vipps.net.Models.Epayment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Vipps.net.Models.Epayment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Vipps.net.Models.Epayment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Reference", Vipps.net.Models.Epayment.Client.ClientUtils.ParameterToString(reference)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", Vipps.net.Models.Epayment.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", Vipps.net.Models.Epayment.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            localVarRequestOptions.Data = forceApprove;

            localVarRequestOptions.Operation = "ForceApproveApi.ForceApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer-Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/test/payments/{Reference}/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForceApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Force approve a payment This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </summary>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ForceApproveAsync(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ForceApproveWithHttpInfoAsync(reference, merchantSerialNumber, ocpApimSubscriptionKey, forceApprove, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Force approve a payment This endpoint is only available in the test environment. It allows developers to approve a payment through the ePayment API without the use of the Vipps or MobilePay app. This is useful for automated testing. Express checkout is not supported for this endpoint. Attempted use in production is not allowed, and will fail. Important: All test users must manually approve at least one payment in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </summary>
        /// <exception cref="Vipps.net.Models.Epayment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="merchantSerialNumber"></param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit.  See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="forceApprove">Force approve request body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Vipps.net.Models.Epayment.Client.ApiResponse<Object>> ForceApproveWithHttpInfoAsync(string reference, string merchantSerialNumber, string ocpApimSubscriptionKey, ForceApprove forceApprove = default(ForceApprove), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new Vipps.net.Models.Epayment.Client.ApiException(400, "Missing required parameter 'reference' when calling ForceApproveApi->ForceApprove");
            }

            // verify the required parameter 'merchantSerialNumber' is set
            if (merchantSerialNumber == null)
            {
                throw new Vipps.net.Models.Epayment.Client.ApiException(400, "Missing required parameter 'merchantSerialNumber' when calling ForceApproveApi->ForceApprove");
            }

            // verify the required parameter 'ocpApimSubscriptionKey' is set
            if (ocpApimSubscriptionKey == null)
            {
                throw new Vipps.net.Models.Epayment.Client.ApiException(400, "Missing required parameter 'ocpApimSubscriptionKey' when calling ForceApproveApi->ForceApprove");
            }


            Vipps.net.Models.Epayment.Client.RequestOptions localVarRequestOptions = new Vipps.net.Models.Epayment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Vipps.net.Models.Epayment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Vipps.net.Models.Epayment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Reference", Vipps.net.Models.Epayment.Client.ClientUtils.ParameterToString(reference)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", Vipps.net.Models.Epayment.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", Vipps.net.Models.Epayment.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            localVarRequestOptions.Data = forceApprove;

            localVarRequestOptions.Operation = "ForceApproveApi.ForceApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer-Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/test/payments/{Reference}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForceApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
