/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Vipps.net.Models.Checkout.Client;
using Vipps.net.Models.Checkout.Model;

namespace Vipps.net.Models.Checkout.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Checkout session
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiateSessionResponse</returns>
        InitiateSessionResponse CheckoutV3SessionPost(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0);

        /// <summary>
        /// Create a Checkout session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiateSessionResponse</returns>
        ApiResponse<InitiateSessionResponse> CheckoutV3SessionPostWithHttpInfo(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0);
        /// <summary>
        /// Get session info
        /// </summary>
        /// <remarks>
        /// Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SessionResponse</returns>
        SessionResponse CheckoutV3SessionReferenceGet(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0);

        /// <summary>
        /// Get session info
        /// </summary>
        /// <remarks>
        /// Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> CheckoutV3SessionReferenceGetWithHttpInfo(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Checkout session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateSessionResponse</returns>
        System.Threading.Tasks.Task<InitiateSessionResponse> CheckoutV3SessionPostAsync(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Checkout session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateSessionResponse>> CheckoutV3SessionPostWithHttpInfoAsync(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get session info
        /// </summary>
        /// <remarks>
        /// Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        System.Threading.Tasks.Task<SessionResponse> CheckoutV3SessionReferenceGetAsync(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get session info
        /// </summary>
        /// <remarks>
        /// Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </remarks>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionResponse>> CheckoutV3SessionReferenceGetWithHttpInfoAsync(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApi : ISessionApiSync, ISessionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionApi : ISessionApi
    {
        private Vipps.net.Models.Checkout.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi(string basePath)
        {
            this.Configuration = Vipps.net.Models.Checkout.Client.Configuration.MergeConfigurations(
                Vipps.net.Models.Checkout.Client.GlobalConfiguration.Instance,
                new Vipps.net.Models.Checkout.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Vipps.net.Models.Checkout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vipps.net.Models.Checkout.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Vipps.net.Models.Checkout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionApi(Vipps.net.Models.Checkout.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Vipps.net.Models.Checkout.Client.Configuration.MergeConfigurations(
                Vipps.net.Models.Checkout.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Vipps.net.Models.Checkout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vipps.net.Models.Checkout.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Vipps.net.Models.Checkout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SessionApi(Vipps.net.Models.Checkout.Client.ISynchronousClient client, Vipps.net.Models.Checkout.Client.IAsynchronousClient asyncClient, Vipps.net.Models.Checkout.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Vipps.net.Models.Checkout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Vipps.net.Models.Checkout.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Vipps.net.Models.Checkout.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Vipps.net.Models.Checkout.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Vipps.net.Models.Checkout.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Checkout session 
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiateSessionResponse</returns>
        public InitiateSessionResponse CheckoutV3SessionPost(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0)
        {
            Vipps.net.Models.Checkout.Client.ApiResponse<InitiateSessionResponse> localVarResponse = CheckoutV3SessionPostWithHttpInfo(vippsSystemName, vippsSystemVersion, vippsSystemPluginName, vippsSystemPluginVersion, clientId, clientSecret, ocpApimSubscriptionKey, merchantSerialNumber, idempotencyKey, checkoutV3SessionPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Checkout session 
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiateSessionResponse</returns>
        public Vipps.net.Models.Checkout.Client.ApiResponse<InitiateSessionResponse> CheckoutV3SessionPostWithHttpInfo(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0)
        {
            Vipps.net.Models.Checkout.Client.RequestOptions localVarRequestOptions = new Vipps.net.Models.Checkout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (vippsSystemName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemName)); // header parameter
            }
            if (vippsSystemVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemVersion)); // header parameter
            }
            if (vippsSystemPluginName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginName)); // header parameter
            }
            if (vippsSystemPluginVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginVersion)); // header parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_id", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_secret", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            }
            if (ocpApimSubscriptionKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            }
            if (merchantSerialNumber != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = checkoutV3SessionPostRequest;

            localVarRequestOptions.Operation = "SessionApi.CheckoutV3SessionPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InitiateSessionResponse>("/checkout/v3/session", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckoutV3SessionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Checkout session 
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateSessionResponse</returns>
        public async System.Threading.Tasks.Task<InitiateSessionResponse> CheckoutV3SessionPostAsync(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Vipps.net.Models.Checkout.Client.ApiResponse<InitiateSessionResponse> localVarResponse = await CheckoutV3SessionPostWithHttpInfoAsync(vippsSystemName, vippsSystemVersion, vippsSystemPluginName, vippsSystemPluginVersion, clientId, clientSecret, ocpApimSubscriptionKey, merchantSerialNumber, idempotencyKey, checkoutV3SessionPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Checkout session 
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="checkoutV3SessionPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateSessionResponse)</returns>
        public async System.Threading.Tasks.Task<Vipps.net.Models.Checkout.Client.ApiResponse<InitiateSessionResponse>> CheckoutV3SessionPostWithHttpInfoAsync(string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), CheckoutV3SessionPostRequest checkoutV3SessionPostRequest = default(CheckoutV3SessionPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Vipps.net.Models.Checkout.Client.RequestOptions localVarRequestOptions = new Vipps.net.Models.Checkout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (vippsSystemName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemName)); // header parameter
            }
            if (vippsSystemVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemVersion)); // header parameter
            }
            if (vippsSystemPluginName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginName)); // header parameter
            }
            if (vippsSystemPluginVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginVersion)); // header parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_id", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_secret", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            }
            if (ocpApimSubscriptionKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            }
            if (merchantSerialNumber != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = checkoutV3SessionPostRequest;

            localVarRequestOptions.Operation = "SessionApi.CheckoutV3SessionPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InitiateSessionResponse>("/checkout/v3/session", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckoutV3SessionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get session info Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SessionResponse</returns>
        public SessionResponse CheckoutV3SessionReferenceGet(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0)
        {
            Vipps.net.Models.Checkout.Client.ApiResponse<SessionResponse> localVarResponse = CheckoutV3SessionReferenceGetWithHttpInfo(reference, vippsSystemName, vippsSystemVersion, vippsSystemPluginName, vippsSystemPluginVersion, clientId, clientSecret, ocpApimSubscriptionKey, merchantSerialNumber, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get session info Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public Vipps.net.Models.Checkout.Client.ApiResponse<SessionResponse> CheckoutV3SessionReferenceGetWithHttpInfo(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new Vipps.net.Models.Checkout.Client.ApiException(400, "Missing required parameter 'reference' when calling SessionApi->CheckoutV3SessionReferenceGet");
            }

            Vipps.net.Models.Checkout.Client.RequestOptions localVarRequestOptions = new Vipps.net.Models.Checkout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(reference)); // path parameter
            if (vippsSystemName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemName)); // header parameter
            }
            if (vippsSystemVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemVersion)); // header parameter
            }
            if (vippsSystemPluginName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginName)); // header parameter
            }
            if (vippsSystemPluginVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginVersion)); // header parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_id", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_secret", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            }
            if (ocpApimSubscriptionKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            }
            if (merchantSerialNumber != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SessionApi.CheckoutV3SessionReferenceGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SessionResponse>("/checkout/v3/session/{reference}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckoutV3SessionReferenceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get session info Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        public async System.Threading.Tasks.Task<SessionResponse> CheckoutV3SessionReferenceGetAsync(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Vipps.net.Models.Checkout.Client.ApiResponse<SessionResponse> localVarResponse = await CheckoutV3SessionReferenceGetWithHttpInfoAsync(reference, vippsSystemName, vippsSystemVersion, vippsSystemPluginName, vippsSystemPluginVersion, clientId, clientSecret, ocpApimSubscriptionKey, merchantSerialNumber, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get session info Transaction information, user information and shipping information are included in the response  if the SessionState is PaymentInitiated
        /// </summary>
        /// <exception cref="Vipps.net.Models.Checkout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The reference of the session. Example: \&quot;123123\&quot;.</param>
        /// <param name="vippsSystemName"> (optional, default to &quot;{{system_name}}&quot;)</param>
        /// <param name="vippsSystemVersion"> (optional, default to &quot;{{system_version}}&quot;)</param>
        /// <param name="vippsSystemPluginName"> (optional, default to &quot;{{system_plugin_name}}&quot;)</param>
        /// <param name="vippsSystemPluginVersion"> (optional, default to &quot;{{system_plugin_version}}&quot;)</param>
        /// <param name="clientId"> (optional, default to &quot;{{client_id}}&quot;)</param>
        /// <param name="clientSecret"> (optional, default to &quot;{{client_secret}}&quot;)</param>
        /// <param name="ocpApimSubscriptionKey"> (optional, default to &quot;{{Ocp-Apim-Subscription-Key}}&quot;)</param>
        /// <param name="merchantSerialNumber"> (optional, default to &quot;{{merchantSerialNumber}}&quot;)</param>
        /// <param name="idempotencyKey"> (optional, default to &quot;{{Idempotency-Key}}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        public async System.Threading.Tasks.Task<Vipps.net.Models.Checkout.Client.ApiResponse<SessionResponse>> CheckoutV3SessionReferenceGetWithHttpInfoAsync(string reference, string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string), string idempotencyKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new Vipps.net.Models.Checkout.Client.ApiException(400, "Missing required parameter 'reference' when calling SessionApi->CheckoutV3SessionReferenceGet");
            }


            Vipps.net.Models.Checkout.Client.RequestOptions localVarRequestOptions = new Vipps.net.Models.Checkout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Vipps.net.Models.Checkout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(reference)); // path parameter
            if (vippsSystemName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemName)); // header parameter
            }
            if (vippsSystemVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemVersion)); // header parameter
            }
            if (vippsSystemPluginName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Name", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginName)); // header parameter
            }
            if (vippsSystemPluginVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Version", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(vippsSystemPluginVersion)); // header parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_id", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.HeaderParameters.Add("client_secret", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            }
            if (ocpApimSubscriptionKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            }
            if (merchantSerialNumber != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Vipps.net.Models.Checkout.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SessionApi.CheckoutV3SessionReferenceGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SessionResponse>("/checkout/v3/session/{reference}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckoutV3SessionReferenceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
