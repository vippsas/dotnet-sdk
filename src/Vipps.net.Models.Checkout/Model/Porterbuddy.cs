/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// Configuration required to enable Porterbuddy logistics options
    /// </summary>
    [DataContract(Name = "Porterbuddy")]
    public partial class Porterbuddy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Porterbuddy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Porterbuddy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Porterbuddy" /> class.
        /// </summary>
        /// <param name="publicToken">The public key provided to you by Porterbuddy (required).</param>
        /// <param name="apiKey">The API key provided to you by Porterbuddy (required).</param>
        /// <param name="origin">Information about the sender (required).</param>
        public Porterbuddy(string publicToken = default(string), string apiKey = default(string), PorterbuddyOrigin origin = default(PorterbuddyOrigin))
        {
            // to ensure "publicToken" is required (not null)
            if (publicToken == null)
            {
                throw new ArgumentNullException("publicToken is a required property for Porterbuddy and cannot be null");
            }
            this.PublicToken = publicToken;
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new ArgumentNullException("apiKey is a required property for Porterbuddy and cannot be null");
            }
            this.ApiKey = apiKey;
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for Porterbuddy and cannot be null");
            }
            this.Origin = origin;
        }

        /// <summary>
        /// The public key provided to you by Porterbuddy
        /// </summary>
        /// <value>The public key provided to you by Porterbuddy</value>
        [DataMember(Name = "publicToken", IsRequired = true, EmitDefaultValue = true)]
        public string PublicToken { get; set; }

        /// <summary>
        /// The API key provided to you by Porterbuddy
        /// </summary>
        /// <value>The API key provided to you by Porterbuddy</value>
        [DataMember(Name = "apiKey", IsRequired = true, EmitDefaultValue = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Information about the sender
        /// </summary>
        /// <value>Information about the sender</value>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public PorterbuddyOrigin Origin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Porterbuddy {\n");
            sb.Append("  PublicToken: ").Append(PublicToken).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ApiKey (string) minLength
            if (this.ApiKey != null && this.ApiKey.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ApiKey, length must be greater than 1.", new [] { "ApiKey" });
            }

            yield break;
        }
    }

}
