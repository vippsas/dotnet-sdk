/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// CheckoutConfig
    /// </summary>
    [DataContract(Name = "CheckoutConfig")]
    public partial class CheckoutConfig : IValidatableObject
    {

        /// <summary>
        /// If customer is physically present: \&quot;customer_present\&quot;, otherwise: \&quot;customer_not_present\&quot;.
        /// </summary>
        /// <value>If customer is physically present: \&quot;customer_present\&quot;, otherwise: \&quot;customer_not_present\&quot;.</value>
        [DataMember(Name = "customerInteraction", EmitDefaultValue = true)]
        public CustomerInteraction? CustomerInteraction { get; set; }

        /// <summary>
        /// Adjust the fields and values present in the Checkout.
        /// </summary>
        /// <value>Adjust the fields and values present in the Checkout.</value>
        [DataMember(Name = "elements", EmitDefaultValue = true)]
        public Elements? Elements { get; set; }

        /// <summary>
        /// One of the following: \&quot;WEB_REDIRECT\&quot;, \&quot;NATIVE_REDIRECT\&quot;. To ensure having a return URL based on an app URL, use \&quot;NATIVE_REDIRECT\&quot;.
        /// </summary>
        /// <value>One of the following: \&quot;WEB_REDIRECT\&quot;, \&quot;NATIVE_REDIRECT\&quot;. To ensure having a return URL based on an app URL, use \&quot;NATIVE_REDIRECT\&quot;.</value>
        [DataMember(Name = "userFlow", EmitDefaultValue = true)]
        public UserFlow? UserFlow { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutConfig" /> class.
        /// </summary>
        /// <param name="customerInteraction">If customer is physically present: \&quot;customer_present\&quot;, otherwise: \&quot;customer_not_present\&quot;..</param>
        /// <param name="elements">Adjust the fields and values present in the Checkout..</param>
        /// <param name="countries">Countries to allow during session.</param>
        /// <param name="userFlow">One of the following: \&quot;WEB_REDIRECT\&quot;, \&quot;NATIVE_REDIRECT\&quot;. To ensure having a return URL based on an app URL, use \&quot;NATIVE_REDIRECT\&quot;..</param>
        /// <param name="requireUserInfo">Requires the customer to consent to share their email and openid sub with the merchant to be able to make a wallet payment (default: false)..</param>
        /// <param name="customConsent">If used, displays a checkbox that can be used to ask for extra consent..</param>
        /// <param name="showOrderSummary">Decides whether the order lines are displayed as a shopping cart context in the checkout..</param>
        /// <param name="externalPaymentMethods">External payment methods to be enabled in the checkout..</param>
        public CheckoutConfig(CustomerInteraction? customerInteraction = default(CustomerInteraction?), Elements? elements = default(Elements?), Countries countries = default(Countries), UserFlow? userFlow = default(UserFlow?), bool? requireUserInfo = default(bool?), CustomConsent customConsent = default(CustomConsent), bool? showOrderSummary = default(bool?), List<ExternalPaymentMethod> externalPaymentMethods = default(List<ExternalPaymentMethod>))
        {
            this.CustomerInteraction = customerInteraction;
            this.Elements = elements;
            this.Countries = countries;
            this.UserFlow = userFlow;
            this.RequireUserInfo = requireUserInfo;
            this.CustomConsent = customConsent;
            this.ShowOrderSummary = showOrderSummary;
            this.ExternalPaymentMethods = externalPaymentMethods;
        }

        /// <summary>
        /// Countries to allow during session
        /// </summary>
        /// <value>Countries to allow during session</value>
        [DataMember(Name = "countries", EmitDefaultValue = true)]
        public Countries Countries { get; set; }

        /// <summary>
        /// Requires the customer to consent to share their email and openid sub with the merchant to be able to make a wallet payment (default: false).
        /// </summary>
        /// <value>Requires the customer to consent to share their email and openid sub with the merchant to be able to make a wallet payment (default: false).</value>
        [DataMember(Name = "requireUserInfo", EmitDefaultValue = true)]
        public bool? RequireUserInfo { get; set; }

        /// <summary>
        /// If used, displays a checkbox that can be used to ask for extra consent.
        /// </summary>
        /// <value>If used, displays a checkbox that can be used to ask for extra consent.</value>
        [DataMember(Name = "customConsent", EmitDefaultValue = true)]
        public CustomConsent CustomConsent { get; set; }

        /// <summary>
        /// Decides whether the order lines are displayed as a shopping cart context in the checkout.
        /// </summary>
        /// <value>Decides whether the order lines are displayed as a shopping cart context in the checkout.</value>
        [DataMember(Name = "showOrderSummary", EmitDefaultValue = true)]
        public bool? ShowOrderSummary { get; set; }

        /// <summary>
        /// External payment methods to be enabled in the checkout.
        /// </summary>
        /// <value>External payment methods to be enabled in the checkout.</value>
        [DataMember(Name = "externalPaymentMethods", EmitDefaultValue = true)]
        public List<ExternalPaymentMethod> ExternalPaymentMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutConfig {\n");
            sb.Append("  CustomerInteraction: ").Append(CustomerInteraction).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  UserFlow: ").Append(UserFlow).Append("\n");
            sb.Append("  RequireUserInfo: ").Append(RequireUserInfo).Append("\n");
            sb.Append("  CustomConsent: ").Append(CustomConsent).Append("\n");
            sb.Append("  ShowOrderSummary: ").Append(ShowOrderSummary).Append("\n");
            sb.Append("  ExternalPaymentMethods: ").Append(ExternalPaymentMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
