/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// Configuration required to enable Helthjem logistics options
    /// </summary>
    [DataContract(Name = "Helthjem")]
    public partial class Helthjem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Helthjem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Helthjem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Helthjem" /> class.
        /// </summary>
        /// <param name="username">The Username provided to you by Helthjem (required).</param>
        /// <param name="password">The Password provided to you by Helthjem (required).</param>
        /// <param name="shopId">The ShopId provided to you by Helthjem (required).</param>
        public Helthjem(string username = default(string), string password = default(string), int shopId = default(int))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for Helthjem and cannot be null");
            }
            this.Username = username;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for Helthjem and cannot be null");
            }
            this.Password = password;
            this.ShopId = shopId;
        }

        /// <summary>
        /// The Username provided to you by Helthjem
        /// </summary>
        /// <value>The Username provided to you by Helthjem</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// The Password provided to you by Helthjem
        /// </summary>
        /// <value>The Password provided to you by Helthjem</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// The ShopId provided to you by Helthjem
        /// </summary>
        /// <value>The ShopId provided to you by Helthjem</value>
        [DataMember(Name = "shopId", IsRequired = true, EmitDefaultValue = true)]
        public int ShopId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Helthjem {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ShopId: ").Append(ShopId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Username (string) minLength
            if (this.Username != null && this.Username.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Username, length must be greater than 1.", new [] { "Username" });
            }

            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Password, length must be greater than 1.", new [] { "Password" });
            }

            yield break;
        }
    }

}
