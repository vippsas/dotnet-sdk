/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// OrderBottomLine
    /// </summary>
    [DataContract(Name = "OrderBottomLine")]
    public partial class OrderBottomLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBottomLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderBottomLine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBottomLine" /> class.
        /// </summary>
        /// <param name="currency">The currency identifier according to ISO 4217. Example: \&quot;NOK\&quot;. (required).</param>
        /// <param name="tipAmount">Tip amount for the order. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000..</param>
        /// <param name="giftCardAmount">Amount paid by gift card or coupon. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000..</param>
        /// <param name="terminalId">Identifier of the terminal / point of sale..</param>
        /// <param name="paymentSources">May be used to indicate that the payment comes from multiple sources. Example: giftcard + card.</param>
        /// <param name="receiptNumber">receiptNumber.</param>
        public OrderBottomLine(string currency = default(string), long? tipAmount = default(long?), long? giftCardAmount = default(long?), string terminalId = default(string), PaymentSources paymentSources = default(PaymentSources), string receiptNumber = default(string))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for OrderBottomLine and cannot be null");
            }
            this.Currency = currency;
            this.TipAmount = tipAmount;
            this.GiftCardAmount = giftCardAmount;
            this.TerminalId = terminalId;
            this.PaymentSources = paymentSources;
            this.ReceiptNumber = receiptNumber;
        }

        /// <summary>
        /// The currency identifier according to ISO 4217. Example: \&quot;NOK\&quot;.
        /// </summary>
        /// <value>The currency identifier according to ISO 4217. Example: \&quot;NOK\&quot;.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Tip amount for the order. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.
        /// </summary>
        /// <value>Tip amount for the order. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.</value>
        [DataMember(Name = "tipAmount", EmitDefaultValue = true)]
        public long? TipAmount { get; set; }

        /// <summary>
        /// Amount paid by gift card or coupon. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.
        /// </summary>
        /// <value>Amount paid by gift card or coupon. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.</value>
        [DataMember(Name = "giftCardAmount", EmitDefaultValue = true)]
        public long? GiftCardAmount { get; set; }

        /// <summary>
        /// Identifier of the terminal / point of sale.
        /// </summary>
        /// <value>Identifier of the terminal / point of sale.</value>
        [DataMember(Name = "terminalId", EmitDefaultValue = true)]
        public string TerminalId { get; set; }

        /// <summary>
        /// May be used to indicate that the payment comes from multiple sources. Example: giftcard + card
        /// </summary>
        /// <value>May be used to indicate that the payment comes from multiple sources. Example: giftcard + card</value>
        [DataMember(Name = "paymentSources", EmitDefaultValue = true)]
        public PaymentSources PaymentSources { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptNumber
        /// </summary>
        [DataMember(Name = "receiptNumber", EmitDefaultValue = true)]
        public string ReceiptNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderBottomLine {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TipAmount: ").Append(TipAmount).Append("\n");
            sb.Append("  GiftCardAmount: ").Append(GiftCardAmount).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  PaymentSources: ").Append(PaymentSources).Append("\n");
            sb.Append("  ReceiptNumber: ").Append(ReceiptNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 3)
            {
                yield return new ValidationResult("Invalid value for Currency, length must be less than 3.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if (this.Currency != null && this.Currency.Length < 3)
            {
                yield return new ValidationResult("Invalid value for Currency, length must be greater than 3.", new [] { "Currency" });
            }

            yield break;
        }
    }

}
