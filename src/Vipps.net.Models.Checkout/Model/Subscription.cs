/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract(Name = "Subscription")]
    public partial class Subscription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Subscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="productName">Name of the subscription, visible to the customer during payment. Example: \&quot;Bi-Weekly Socks\&quot;. (required).</param>
        /// <param name="amount">The amount to be charged by the given interval (required).</param>
        /// <param name="interval">How often the amount is to be charged. For example every 2 weeks. (required).</param>
        /// <param name="merchantAgreementUrl">Complete URL to the merchant&#39;s page regarding the subscription. Example: \&quot;https://example.com/vipps/subscription/socks\&quot;. (required).</param>
        /// <param name="productDescription">Description visible to the customer during subscribing. Example: \&quot;Bi-Weekly Subscription of 1 pair of socks\&quot;..</param>
        /// <param name="campaign">campaign.</param>
        public Subscription(string productName = default(string), Amount amount = default(Amount), Interval interval = default(Interval), string merchantAgreementUrl = default(string), string productDescription = default(string), SubscriptionCampaign campaign = default(SubscriptionCampaign))
        {
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new ArgumentNullException("productName is a required property for Subscription and cannot be null");
            }
            this.ProductName = productName;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for Subscription and cannot be null");
            }
            this.Amount = amount;
            // to ensure "interval" is required (not null)
            if (interval == null)
            {
                throw new ArgumentNullException("interval is a required property for Subscription and cannot be null");
            }
            this.Interval = interval;
            // to ensure "merchantAgreementUrl" is required (not null)
            if (merchantAgreementUrl == null)
            {
                throw new ArgumentNullException("merchantAgreementUrl is a required property for Subscription and cannot be null");
            }
            this.MerchantAgreementUrl = merchantAgreementUrl;
            this.ProductDescription = productDescription;
            this.Campaign = campaign;
        }

        /// <summary>
        /// Name of the subscription, visible to the customer during payment. Example: \&quot;Bi-Weekly Socks\&quot;.
        /// </summary>
        /// <value>Name of the subscription, visible to the customer during payment. Example: \&quot;Bi-Weekly Socks\&quot;.</value>
        [DataMember(Name = "productName", IsRequired = true, EmitDefaultValue = true)]
        public string ProductName { get; set; }

        /// <summary>
        /// The amount to be charged by the given interval
        /// </summary>
        /// <value>The amount to be charged by the given interval</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// How often the amount is to be charged. For example every 2 weeks.
        /// </summary>
        /// <value>How often the amount is to be charged. For example every 2 weeks.</value>
        [DataMember(Name = "interval", IsRequired = true, EmitDefaultValue = true)]
        public Interval Interval { get; set; }

        /// <summary>
        /// Complete URL to the merchant&#39;s page regarding the subscription. Example: \&quot;https://example.com/vipps/subscription/socks\&quot;.
        /// </summary>
        /// <value>Complete URL to the merchant&#39;s page regarding the subscription. Example: \&quot;https://example.com/vipps/subscription/socks\&quot;.</value>
        [DataMember(Name = "merchantAgreementUrl", IsRequired = true, EmitDefaultValue = true)]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// Description visible to the customer during subscribing. Example: \&quot;Bi-Weekly Subscription of 1 pair of socks\&quot;.
        /// </summary>
        /// <value>Description visible to the customer during subscribing. Example: \&quot;Bi-Weekly Subscription of 1 pair of socks\&quot;.</value>
        [DataMember(Name = "productDescription", EmitDefaultValue = true)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Gets or Sets Campaign
        /// </summary>
        [DataMember(Name = "campaign", EmitDefaultValue = true)]
        public SubscriptionCampaign Campaign { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  MerchantAgreementUrl: ").Append(MerchantAgreementUrl).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  Campaign: ").Append(Campaign).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProductName (string) maxLength
            if (this.ProductName != null && this.ProductName.Length > 45)
            {
                yield return new ValidationResult("Invalid value for ProductName, length must be less than 45.", new [] { "ProductName" });
            }

            // ProductName (string) minLength
            if (this.ProductName != null && this.ProductName.Length < 3)
            {
                yield return new ValidationResult("Invalid value for ProductName, length must be greater than 3.", new [] { "ProductName" });
            }

            yield break;
        }
    }

}
