/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// The pickup point the customer selected .
    /// </summary>
    [DataContract(Name = "PickupPoint")]
    public partial class PickupPoint : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PickupPoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PickupPoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PickupPoint" /> class.
        /// </summary>
        /// <param name="id">Pickup point id provided by the carrier. Example: 121648 (required).</param>
        /// <param name="name">Pickup point name. Example: Extra Eiganes (required).</param>
        /// <param name="address">Pickup point&#39;s street address. Example: VITAMINVEIEN 7 (required).</param>
        /// <param name="postalCode">Pickup point&#39;s postal code. Example: 0485 (required).</param>
        /// <param name="city">Pickup point&#39;s city. Example: OSLO (required).</param>
        /// <param name="country">Pickup point&#39;s country. Example: NO (required).</param>
        /// <param name="openingHours">Pickup point&#39;s opening hours. Example: Man-Søn: 1000-2000.</param>
        public PickupPoint(string id = default(string), string name = default(string), string address = default(string), string postalCode = default(string), string city = default(string), string country = default(string), List<string> openingHours = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PickupPoint and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PickupPoint and cannot be null");
            }
            this.Name = name;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for PickupPoint and cannot be null");
            }
            this.Address = address;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for PickupPoint and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for PickupPoint and cannot be null");
            }
            this.City = city;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for PickupPoint and cannot be null");
            }
            this.Country = country;
            this.OpeningHours = openingHours;
        }

        /// <summary>
        /// Pickup point id provided by the carrier. Example: 121648
        /// </summary>
        /// <value>Pickup point id provided by the carrier. Example: 121648</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Pickup point name. Example: Extra Eiganes
        /// </summary>
        /// <value>Pickup point name. Example: Extra Eiganes</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Pickup point&#39;s street address. Example: VITAMINVEIEN 7
        /// </summary>
        /// <value>Pickup point&#39;s street address. Example: VITAMINVEIEN 7</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Pickup point&#39;s postal code. Example: 0485
        /// </summary>
        /// <value>Pickup point&#39;s postal code. Example: 0485</value>
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Pickup point&#39;s city. Example: OSLO
        /// </summary>
        /// <value>Pickup point&#39;s city. Example: OSLO</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Pickup point&#39;s country. Example: NO
        /// </summary>
        /// <value>Pickup point&#39;s country. Example: NO</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Pickup point&#39;s opening hours. Example: Man-Søn: 1000-2000
        /// </summary>
        /// <value>Pickup point&#39;s opening hours. Example: Man-Søn: 1000-2000</value>
        [DataMember(Name = "openingHours", EmitDefaultValue = true)]
        public List<string> OpeningHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PickupPoint {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  OpeningHours: ").Append(OpeningHours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
