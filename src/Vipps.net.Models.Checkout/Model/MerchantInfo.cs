/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// MerchantInfo
    /// </summary>
    [DataContract(Name = "MerchantInfo")]
    public partial class MerchantInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantInfo" /> class.
        /// </summary>
        /// <param name="callbackUrl">Complete URL for receiving callback after payment is completed. Example: \&quot;https://exmaple.com/vipps/payment-callback/oS1d5f9abD (required).</param>
        /// <param name="returnUrl">Complete URL for redirecting customers to when the checkout is finished. Example: \&quot;https://example.com/vipps\&quot;. (required).</param>
        /// <param name="callbackAuthorizationToken">The token will be supplied by the callback to the merchant as a header. Example: \&quot;iOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImllX3FXQ1hoWHh0MXpJ\&quot;. (required).</param>
        /// <param name="termsAndConditionsUrl">Complete URL to the merchant&#39;s terms and conditions. Example: \&quot;https://example.com/vipps/termsAndConditions\&quot;..</param>
        public MerchantInfo(string callbackUrl = default(string), string returnUrl = default(string), string callbackAuthorizationToken = default(string), string termsAndConditionsUrl = default(string))
        {
            // to ensure "callbackUrl" is required (not null)
            if (callbackUrl == null)
            {
                throw new ArgumentNullException("callbackUrl is a required property for MerchantInfo and cannot be null");
            }
            this.CallbackUrl = callbackUrl;
            // to ensure "returnUrl" is required (not null)
            if (returnUrl == null)
            {
                throw new ArgumentNullException("returnUrl is a required property for MerchantInfo and cannot be null");
            }
            this.ReturnUrl = returnUrl;
            // to ensure "callbackAuthorizationToken" is required (not null)
            if (callbackAuthorizationToken == null)
            {
                throw new ArgumentNullException("callbackAuthorizationToken is a required property for MerchantInfo and cannot be null");
            }
            this.CallbackAuthorizationToken = callbackAuthorizationToken;
            this.TermsAndConditionsUrl = termsAndConditionsUrl;
        }

        /// <summary>
        /// Complete URL for receiving callback after payment is completed. Example: \&quot;https://exmaple.com/vipps/payment-callback/oS1d5f9abD
        /// </summary>
        /// <value>Complete URL for receiving callback after payment is completed. Example: \&quot;https://exmaple.com/vipps/payment-callback/oS1d5f9abD</value>
        [DataMember(Name = "callbackUrl", IsRequired = true, EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Complete URL for redirecting customers to when the checkout is finished. Example: \&quot;https://example.com/vipps\&quot;.
        /// </summary>
        /// <value>Complete URL for redirecting customers to when the checkout is finished. Example: \&quot;https://example.com/vipps\&quot;.</value>
        [DataMember(Name = "returnUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// The token will be supplied by the callback to the merchant as a header. Example: \&quot;iOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImllX3FXQ1hoWHh0MXpJ\&quot;.
        /// </summary>
        /// <value>The token will be supplied by the callback to the merchant as a header. Example: \&quot;iOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImllX3FXQ1hoWHh0MXpJ\&quot;.</value>
        [DataMember(Name = "callbackAuthorizationToken", IsRequired = true, EmitDefaultValue = true)]
        public string CallbackAuthorizationToken { get; set; }

        /// <summary>
        /// Complete URL to the merchant&#39;s terms and conditions. Example: \&quot;https://example.com/vipps/termsAndConditions\&quot;.
        /// </summary>
        /// <value>Complete URL to the merchant&#39;s terms and conditions. Example: \&quot;https://example.com/vipps/termsAndConditions\&quot;.</value>
        [DataMember(Name = "termsAndConditionsUrl", EmitDefaultValue = true)]
        public string TermsAndConditionsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerchantInfo {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  CallbackAuthorizationToken: ").Append(CallbackAuthorizationToken).Append("\n");
            sb.Append("  TermsAndConditionsUrl: ").Append(TermsAndConditionsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReturnUrl (string) minLength
            if (this.ReturnUrl != null && this.ReturnUrl.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ReturnUrl, length must be greater than 1.", new [] { "ReturnUrl" });
            }

            yield break;
        }
    }

}
