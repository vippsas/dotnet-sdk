/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// OrderLine
    /// </summary>
    [DataContract(Name = "OrderLine")]
    public partial class OrderLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderLine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLine" /> class.
        /// </summary>
        /// <param name="name">The name of the product in the order line. (required).</param>
        /// <param name="id">The product ID. (required).</param>
        /// <param name="totalAmount">Total amount of the order line, including tax and discount. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000. (required).</param>
        /// <param name="totalAmountExcludingTax">Total amount of order line with discount excluding tax. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000. (required).</param>
        /// <param name="totalTaxAmount">Total tax amount paid for the order line. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000. (required).</param>
        /// <param name="taxPercentage">Use TaxRate property instead.</param>
        /// <param name="taxRate">Tax percentage for the order line, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000 (required).</param>
        /// <param name="unitInfo">If no quantity info is provided the order line will default to 1 pcs..</param>
        /// <param name="discount">Total discount for the order line. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000..</param>
        /// <param name="productUrl">URL linking back to the product at the merchant..</param>
        /// <param name="isReturn">Flag for marking the orderline as returned. This will make it count negative towards all the sums in BottomLine..</param>
        /// <param name="isShipping">Flag for marking the orderline as a shipping line. This will be shown differently in the app..</param>
        public OrderLine(string name = default(string), string id = default(string), long totalAmount = default(long), long totalAmountExcludingTax = default(long), long totalTaxAmount = default(long), int? taxPercentage = default(int?), int taxRate = default(int), OrderUnitInfo unitInfo = default(OrderUnitInfo), long? discount = default(long?), string productUrl = default(string), bool? isReturn = default(bool?), bool? isShipping = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for OrderLine and cannot be null");
            }
            this.Name = name;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OrderLine and cannot be null");
            }
            this.Id = id;
            this.TotalAmount = totalAmount;
            this.TotalAmountExcludingTax = totalAmountExcludingTax;
            this.TotalTaxAmount = totalTaxAmount;
            this.TaxRate = taxRate;
            this.TaxPercentage = taxPercentage;
            this.UnitInfo = unitInfo;
            this.Discount = discount;
            this.ProductUrl = productUrl;
            this.IsReturn = isReturn;
            this.IsShipping = isShipping;
        }

        /// <summary>
        /// The name of the product in the order line.
        /// </summary>
        /// <value>The name of the product in the order line.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The product ID.
        /// </summary>
        /// <value>The product ID.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Total amount of the order line, including tax and discount. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.
        /// </summary>
        /// <value>Total amount of the order line, including tax and discount. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.</value>
        [DataMember(Name = "totalAmount", IsRequired = true, EmitDefaultValue = true)]
        public long TotalAmount { get; set; }

        /// <summary>
        /// Total amount of order line with discount excluding tax. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.
        /// </summary>
        /// <value>Total amount of order line with discount excluding tax. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.</value>
        [DataMember(Name = "totalAmountExcludingTax", IsRequired = true, EmitDefaultValue = true)]
        public long TotalAmountExcludingTax { get; set; }

        /// <summary>
        /// Total tax amount paid for the order line. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.
        /// </summary>
        /// <value>Total tax amount paid for the order line. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.</value>
        [DataMember(Name = "totalTaxAmount", IsRequired = true, EmitDefaultValue = true)]
        public long TotalTaxAmount { get; set; }

        /// <summary>
        /// Use TaxRate property instead
        /// </summary>
        /// <value>Use TaxRate property instead</value>
        [DataMember(Name = "taxPercentage", EmitDefaultValue = true)]
        [Obsolete]
        public int? TaxPercentage { get; set; }

        /// <summary>
        /// Tax percentage for the order line, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000
        /// </summary>
        /// <value>Tax percentage for the order line, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000</value>
        [DataMember(Name = "taxRate", IsRequired = true, EmitDefaultValue = true)]
        public int TaxRate { get; set; }

        /// <summary>
        /// If no quantity info is provided the order line will default to 1 pcs.
        /// </summary>
        /// <value>If no quantity info is provided the order line will default to 1 pcs.</value>
        [DataMember(Name = "unitInfo", EmitDefaultValue = true)]
        public OrderUnitInfo UnitInfo { get; set; }

        /// <summary>
        /// Total discount for the order line. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.
        /// </summary>
        /// <value>Total discount for the order line. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.</value>
        [DataMember(Name = "discount", EmitDefaultValue = true)]
        public long? Discount { get; set; }

        /// <summary>
        /// URL linking back to the product at the merchant.
        /// </summary>
        /// <value>URL linking back to the product at the merchant.</value>
        [DataMember(Name = "productUrl", EmitDefaultValue = true)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Flag for marking the orderline as returned. This will make it count negative towards all the sums in BottomLine.
        /// </summary>
        /// <value>Flag for marking the orderline as returned. This will make it count negative towards all the sums in BottomLine.</value>
        [DataMember(Name = "isReturn", EmitDefaultValue = true)]
        public bool? IsReturn { get; set; }

        /// <summary>
        /// Flag for marking the orderline as a shipping line. This will be shown differently in the app.
        /// </summary>
        /// <value>Flag for marking the orderline as a shipping line. This will be shown differently in the app.</value>
        [DataMember(Name = "isShipping", EmitDefaultValue = true)]
        public bool? IsShipping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderLine {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalAmountExcludingTax: ").Append(TotalAmountExcludingTax).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  UnitInfo: ").Append(UnitInfo).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  ProductUrl: ").Append(ProductUrl).Append("\n");
            sb.Append("  IsReturn: ").Append(IsReturn).Append("\n");
            sb.Append("  IsShipping: ").Append(IsShipping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 2048.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Id, length must be less than 255.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // TotalAmount (long) minimum
            if (this.TotalAmount < (long)0)
            {
                yield return new ValidationResult("Invalid value for TotalAmount, must be a value greater than or equal to 0.", new [] { "TotalAmount" });
            }

            // TotalAmountExcludingTax (long) minimum
            if (this.TotalAmountExcludingTax < (long)0)
            {
                yield return new ValidationResult("Invalid value for TotalAmountExcludingTax, must be a value greater than or equal to 0.", new [] { "TotalAmountExcludingTax" });
            }

            // TotalTaxAmount (long) minimum
            if (this.TotalTaxAmount < (long)0)
            {
                yield return new ValidationResult("Invalid value for TotalTaxAmount, must be a value greater than or equal to 0.", new [] { "TotalTaxAmount" });
            }

            // TaxPercentage (int?) maximum
            if (this.TaxPercentage > (int?)100)
            {
                yield return new ValidationResult("Invalid value for TaxPercentage, must be a value less than or equal to 100.", new [] { "TaxPercentage" });
            }

            // TaxPercentage (int?) minimum
            if (this.TaxPercentage < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TaxPercentage, must be a value greater than or equal to 0.", new [] { "TaxPercentage" });
            }

            // TaxRate (int) maximum
            if (this.TaxRate > (int)10000)
            {
                yield return new ValidationResult("Invalid value for TaxRate, must be a value less than or equal to 10000.", new [] { "TaxRate" });
            }

            // TaxRate (int) minimum
            if (this.TaxRate < (int)0)
            {
                yield return new ValidationResult("Invalid value for TaxRate, must be a value greater than or equal to 0.", new [] { "TaxRate" });
            }

            // Discount (long?) minimum
            if (this.Discount < (long?)0)
            {
                yield return new ValidationResult("Invalid value for Discount, must be a value greater than or equal to 0.", new [] { "Discount" });
            }

            yield break;
        }
    }

}
