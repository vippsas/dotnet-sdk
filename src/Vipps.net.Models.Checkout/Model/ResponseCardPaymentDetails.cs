/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// Defines the details of a card payment.
    /// </summary>
    [DataContract(Name = "ResponseCardPaymentDetails")]
    public partial class ResponseCardPaymentDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public PaymentState State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseCardPaymentDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseCardPaymentDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseCardPaymentDetails" /> class.
        /// </summary>
        /// <param name="amount">amount (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="aggregate">aggregate.</param>
        /// <param name="type">type (required) (default to &quot;Card&quot;).</param>
        public ResponseCardPaymentDetails(Amount amount = default(Amount), PaymentState state = default(PaymentState), TransactionAggregate aggregate = default(TransactionAggregate), string type = @"Card")
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for ResponseCardPaymentDetails and cannot be null");
            }
            this.Amount = amount;
            this.State = state;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ResponseCardPaymentDetails and cannot be null");
            }
            this.Type = type;
            this.Aggregate = aggregate;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Aggregate
        /// </summary>
        [DataMember(Name = "aggregate", EmitDefaultValue = true)]
        public TransactionAggregate Aggregate { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseCardPaymentDetails {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Type != null) {
                // Type (string) pattern
                Regex regexType = new Regex(@"Card", RegexOptions.CultureInvariant);
                if (!regexType.Match(this.Type).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
                }
            }

            yield break;
        }
    }

}
