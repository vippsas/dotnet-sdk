/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// InitiateSessionRequestBase
    /// </summary>
    [DataContract(Name = "InitiateSessionRequestBase")]
    public partial class InitiateSessionRequestBase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateSessionRequestBase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InitiateSessionRequestBase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateSessionRequestBase" /> class.
        /// </summary>
        /// <param name="prefillCustomer">Information about the customer to be prefilled                If any of the customer information is invalid such as the phone number,  the customer will be prompted to input new user information..</param>
        /// <param name="merchantInfo">merchantInfo (required).</param>
        /// <param name="varConfiguration">varConfiguration.</param>
        public InitiateSessionRequestBase(PrefillCustomer prefillCustomer = default(PrefillCustomer), MerchantInfo merchantInfo = default(MerchantInfo), CheckoutConfig varConfiguration = default(CheckoutConfig))
        {
            // to ensure "merchantInfo" is required (not null)
            if (merchantInfo == null)
            {
                throw new ArgumentNullException("merchantInfo is a required property for InitiateSessionRequestBase and cannot be null");
            }
            this.MerchantInfo = merchantInfo;
            this.PrefillCustomer = prefillCustomer;
            this.VarConfiguration = varConfiguration;
        }

        /// <summary>
        /// Information about the customer to be prefilled                If any of the customer information is invalid such as the phone number,  the customer will be prompted to input new user information.
        /// </summary>
        /// <value>Information about the customer to be prefilled                If any of the customer information is invalid such as the phone number,  the customer will be prompted to input new user information.</value>
        [DataMember(Name = "prefillCustomer", EmitDefaultValue = true)]
        public PrefillCustomer PrefillCustomer { get; set; }

        /// <summary>
        /// Gets or Sets MerchantInfo
        /// </summary>
        [DataMember(Name = "merchantInfo", IsRequired = true, EmitDefaultValue = true)]
        public MerchantInfo MerchantInfo { get; set; }

        /// <summary>
        /// Gets or Sets VarConfiguration
        /// </summary>
        [DataMember(Name = "configuration", EmitDefaultValue = true)]
        public CheckoutConfig VarConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitiateSessionRequestBase {\n");
            sb.Append("  PrefillCustomer: ").Append(PrefillCustomer).Append("\n");
            sb.Append("  MerchantInfo: ").Append(MerchantInfo).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
