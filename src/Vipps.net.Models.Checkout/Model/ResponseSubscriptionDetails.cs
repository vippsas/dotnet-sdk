/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// Defines the details of the transaction
    /// </summary>
    [DataContract(Name = "ResponseSubscriptionDetails")]
    public partial class ResponseSubscriptionDetails : IValidatableObject
    {

        /// <summary>
        /// The state of the recurring agreement.
        /// </summary>
        /// <value>The state of the recurring agreement.</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public SubscriptionState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseSubscriptionDetails" /> class.
        /// </summary>
        /// <param name="state">The state of the recurring agreement..</param>
        /// <param name="agreementId">The reference for the agreement. Used to create future charges, as well as updates to the agreement..</param>
        public ResponseSubscriptionDetails(SubscriptionState? state = default(SubscriptionState?), string agreementId = default(string))
        {
            this.State = state;
            this.AgreementId = agreementId;
        }

        /// <summary>
        /// The reference for the agreement. Used to create future charges, as well as updates to the agreement.
        /// </summary>
        /// <value>The reference for the agreement. Used to create future charges, as well as updates to the agreement.</value>
        [DataMember(Name = "agreementId", EmitDefaultValue = true)]
        public string AgreementId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseSubscriptionDetails {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
