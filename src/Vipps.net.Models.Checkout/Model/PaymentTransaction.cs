/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// PaymentTransaction
    /// </summary>
    [DataContract(Name = "PaymentTransaction")]
    public partial class PaymentTransaction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTransaction" /> class.
        /// </summary>
        /// <param name="amount">amount (required).</param>
        /// <param name="reference">The merchant&#39;s unique reference for the transaction. Also known as OrderId. Example: \&quot;acme-shop-123-order123abc\&quot;. See https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/ (required).</param>
        /// <param name="paymentDescription">Description visible to the customer during payment. Example: \&quot;One pair of socks\&quot;. (required).</param>
        /// <param name="orderSummary">Contain descriptions of each item present in the order, and an order bottom line for information regarding the order as a whole..</param>
        public PaymentTransaction(Amount amount = default(Amount), string reference = default(string), string paymentDescription = default(string), OrderSummary orderSummary = default(OrderSummary))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for PaymentTransaction and cannot be null");
            }
            this.Amount = amount;
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for PaymentTransaction and cannot be null");
            }
            this.Reference = reference;
            // to ensure "paymentDescription" is required (not null)
            if (paymentDescription == null)
            {
                throw new ArgumentNullException("paymentDescription is a required property for PaymentTransaction and cannot be null");
            }
            this.PaymentDescription = paymentDescription;
            this.OrderSummary = orderSummary;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// The merchant&#39;s unique reference for the transaction. Also known as OrderId. Example: \&quot;acme-shop-123-order123abc\&quot;. See https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// </summary>
        /// <value>The merchant&#39;s unique reference for the transaction. Also known as OrderId. Example: \&quot;acme-shop-123-order123abc\&quot;. See https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/</value>
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Description visible to the customer during payment. Example: \&quot;One pair of socks\&quot;.
        /// </summary>
        /// <value>Description visible to the customer during payment. Example: \&quot;One pair of socks\&quot;.</value>
        [DataMember(Name = "paymentDescription", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentDescription { get; set; }

        /// <summary>
        /// Contain descriptions of each item present in the order, and an order bottom line for information regarding the order as a whole.
        /// </summary>
        /// <value>Contain descriptions of each item present in the order, and an order bottom line for information regarding the order as a whole.</value>
        [DataMember(Name = "orderSummary", EmitDefaultValue = true)]
        public OrderSummary OrderSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentTransaction {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  PaymentDescription: ").Append(PaymentDescription).Append("\n");
            sb.Append("  OrderSummary: ").Append(OrderSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 50.", new [] { "Reference" });
            }

            // Reference (string) minLength
            if (this.Reference != null && this.Reference.Length < 8)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be greater than 8.", new [] { "Reference" });
            }

            if (this.Reference != null) {
                // Reference (string) pattern
                Regex regexReference = new Regex(@"^[-a-zA-Z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexReference.Match(this.Reference).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, must match a pattern of " + regexReference, new [] { "Reference" });
                }
            }

            // PaymentDescription (string) maxLength
            if (this.PaymentDescription != null && this.PaymentDescription.Length > 100)
            {
                yield return new ValidationResult("Invalid value for PaymentDescription, length must be less than 100.", new [] { "PaymentDescription" });
            }

            // PaymentDescription (string) minLength
            if (this.PaymentDescription != null && this.PaymentDescription.Length < 3)
            {
                yield return new ValidationResult("Invalid value for PaymentDescription, length must be greater than 3.", new [] { "PaymentDescription" });
            }

            yield break;
        }
    }

}
