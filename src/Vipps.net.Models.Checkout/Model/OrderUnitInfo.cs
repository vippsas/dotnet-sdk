/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// OrderUnitInfo
    /// </summary>
    [DataContract(Name = "OrderUnitInfo")]
    public partial class OrderUnitInfo : IValidatableObject
    {

        /// <summary>
        /// Available units for quantity. Will default to PCS if not set.
        /// </summary>
        /// <value>Available units for quantity. Will default to PCS if not set.</value>
        [DataMember(Name = "quantityUnit", IsRequired = true, EmitDefaultValue = true)]
        public QuantityUnit QuantityUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderUnitInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderUnitInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderUnitInfo" /> class.
        /// </summary>
        /// <param name="unitPrice">Total price per unit, including tax and excluding discount. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000. (required).</param>
        /// <param name="quantity">Quantity given as a integer or fraction (only for cosmetics). (required).</param>
        /// <param name="quantityUnit">Available units for quantity. Will default to PCS if not set. (required).</param>
        public OrderUnitInfo(long unitPrice = default(long), string quantity = default(string), QuantityUnit quantityUnit = default(QuantityUnit))
        {
            this.UnitPrice = unitPrice;
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new ArgumentNullException("quantity is a required property for OrderUnitInfo and cannot be null");
            }
            this.Quantity = quantity;
            this.QuantityUnit = quantityUnit;
        }

        /// <summary>
        /// Total price per unit, including tax and excluding discount. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.
        /// </summary>
        /// <value>Total price per unit, including tax and excluding discount. Must be in minor units. The smallest unit of a currency. Example 100 NOK &#x3D; 10000.</value>
        [DataMember(Name = "unitPrice", IsRequired = true, EmitDefaultValue = true)]
        public long UnitPrice { get; set; }

        /// <summary>
        /// Quantity given as a integer or fraction (only for cosmetics).
        /// </summary>
        /// <value>Quantity given as a integer or fraction (only for cosmetics).</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public string Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderUnitInfo {\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityUnit: ").Append(QuantityUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnitPrice (long) minimum
            if (this.UnitPrice < (long)0)
            {
                yield return new ValidationResult("Invalid value for UnitPrice, must be a value greater than or equal to 0.", new [] { "UnitPrice" });
            }

            yield break;
        }
    }

}
