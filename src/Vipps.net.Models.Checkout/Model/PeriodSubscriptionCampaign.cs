/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// PeriodSubscriptionCampaign
    /// </summary>
    [DataContract(Name = "PeriodSubscriptionCampaign")]
    public partial class PeriodSubscriptionCampaign : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodSubscriptionCampaign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PeriodSubscriptionCampaign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodSubscriptionCampaign" /> class.
        /// </summary>
        /// <param name="period">period (required).</param>
        /// <param name="type">type (required) (default to &quot;PERIOD_CAMPAIGN&quot;).</param>
        /// <param name="price">price (required).</param>
        public PeriodSubscriptionCampaign(Interval period = default(Interval), string type = @"PERIOD_CAMPAIGN", int price = default(int))
        {
            // to ensure "period" is required (not null)
            if (period == null)
            {
                throw new ArgumentNullException("period is a required property for PeriodSubscriptionCampaign and cannot be null");
            }
            this.Period = period;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for PeriodSubscriptionCampaign and cannot be null");
            }
            this.Type = type;
            this.Price = price;
        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public Interval Period { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public int Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodSubscriptionCampaign {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Type != null) {
                // Type (string) pattern
                Regex regexType = new Regex(@"PERIOD_CAMPAIGN", RegexOptions.CultureInvariant);
                if (!regexType.Match(this.Type).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
                }
            }

            // Price (int) minimum
            if (this.Price < (int)0)
            {
                yield return new ValidationResult("Invalid value for Price, must be a value greater than or equal to 0.", new [] { "Price" });
            }

            yield break;
        }
    }

}
