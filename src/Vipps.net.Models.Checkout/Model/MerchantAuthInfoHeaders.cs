/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// Headers required to retrieve an access token.
    /// </summary>
    [DataContract(Name = "MerchantAuthInfoHeaders")]
    public partial class MerchantAuthInfoHeaders : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantAuthInfoHeaders" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantAuthInfoHeaders() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantAuthInfoHeaders" /> class.
        /// </summary>
        /// <param name="clientId">Client ID for the merchant (the \&quot;username\&quot;). See [API keys](/docs/knowledge-base/api-keys/). (required).</param>
        /// <param name="clientSecret">Client Secret for the merchant (the \&quot;password\&quot;). See [API keys](/docs/knowledge-base/api-keys/). (required).</param>
        /// <param name="ocpApimSubscriptionKey">Subscription key for the API product. See [API keys](/docs/knowledge-base/api-keys/). (required).</param>
        /// <param name="merchantSerialNumber">Assigned unique number for a merchant. See [API keys](/docs/knowledge-base/api-keys/). (required).</param>
        public MerchantAuthInfoHeaders(string clientId = default(string), string clientSecret = default(string), string ocpApimSubscriptionKey = default(string), string merchantSerialNumber = default(string))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for MerchantAuthInfoHeaders and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "clientSecret" is required (not null)
            if (clientSecret == null)
            {
                throw new ArgumentNullException("clientSecret is a required property for MerchantAuthInfoHeaders and cannot be null");
            }
            this.ClientSecret = clientSecret;
            // to ensure "ocpApimSubscriptionKey" is required (not null)
            if (ocpApimSubscriptionKey == null)
            {
                throw new ArgumentNullException("ocpApimSubscriptionKey is a required property for MerchantAuthInfoHeaders and cannot be null");
            }
            this.OcpApimSubscriptionKey = ocpApimSubscriptionKey;
            // to ensure "merchantSerialNumber" is required (not null)
            if (merchantSerialNumber == null)
            {
                throw new ArgumentNullException("merchantSerialNumber is a required property for MerchantAuthInfoHeaders and cannot be null");
            }
            this.MerchantSerialNumber = merchantSerialNumber;
        }

        /// <summary>
        /// Client ID for the merchant (the \&quot;username\&quot;). See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>
        /// <value>Client ID for the merchant (the \&quot;username\&quot;). See [API keys](/docs/knowledge-base/api-keys/).</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Client Secret for the merchant (the \&quot;password\&quot;). See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>
        /// <value>Client Secret for the merchant (the \&quot;password\&quot;). See [API keys](/docs/knowledge-base/api-keys/).</value>
        [DataMember(Name = "client_secret", IsRequired = true, EmitDefaultValue = true)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Subscription key for the API product. See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>
        /// <value>Subscription key for the API product. See [API keys](/docs/knowledge-base/api-keys/).</value>
        [DataMember(Name = "ocp-Apim-Subscription-Key", IsRequired = true, EmitDefaultValue = true)]
        public string OcpApimSubscriptionKey { get; set; }

        /// <summary>
        /// Assigned unique number for a merchant. See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>
        /// <value>Assigned unique number for a merchant. See [API keys](/docs/knowledge-base/api-keys/).</value>
        [DataMember(Name = "merchant-Serial-Number", IsRequired = true, EmitDefaultValue = true)]
        public string MerchantSerialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerchantAuthInfoHeaders {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  OcpApimSubscriptionKey: ").Append(OcpApimSubscriptionKey).Append("\n");
            sb.Append("  MerchantSerialNumber: ").Append(MerchantSerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClientId (string) minLength
            if (this.ClientId != null && this.ClientId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ClientId, length must be greater than 1.", new [] { "ClientId" });
            }

            // ClientSecret (string) minLength
            if (this.ClientSecret != null && this.ClientSecret.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ClientSecret, length must be greater than 1.", new [] { "ClientSecret" });
            }

            // OcpApimSubscriptionKey (string) minLength
            if (this.OcpApimSubscriptionKey != null && this.OcpApimSubscriptionKey.Length < 1)
            {
                yield return new ValidationResult("Invalid value for OcpApimSubscriptionKey, length must be greater than 1.", new [] { "OcpApimSubscriptionKey" });
            }

            // MerchantSerialNumber (string) minLength
            if (this.MerchantSerialNumber != null && this.MerchantSerialNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for MerchantSerialNumber, length must be greater than 1.", new [] { "MerchantSerialNumber" });
            }

            yield break;
        }
    }

}
