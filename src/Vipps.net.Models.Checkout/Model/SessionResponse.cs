/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// Session information
    /// </summary>
    [DataContract(Name = "SessionResponse")]
    public partial class SessionResponse : IValidatableObject
    {

        /// <summary>
        /// The state of the session. Example: \&quot;SessionStarted\&quot;. The state of the payment is in PaymentDetails.State.
        /// </summary>
        /// <value>The state of the session. Example: \&quot;SessionStarted\&quot;. The state of the payment is in PaymentDetails.State.</value>
        [DataMember(Name = "sessionState", IsRequired = true, EmitDefaultValue = true)]
        public ExternalSessionState SessionState { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = true)]
        public PaymentMethod? PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SessionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionResponse" /> class.
        /// </summary>
        /// <param name="sessionId">The Id of the session. Example: \&quot;v52EtjZriRmGiKiAKHByK2\&quot;. (required).</param>
        /// <param name="merchantSerialNumber">The merchant&#39;s serial number. Example: \&quot;123456\&quot;.</param>
        /// <param name="reference">The merchant&#39;s unique reference for the transaction. Also known as OrderId. Example: \&quot;acme-shop-123-order123abc\&quot;. See https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/ (required).</param>
        /// <param name="sessionState">The state of the session. Example: \&quot;SessionStarted\&quot;. The state of the payment is in PaymentDetails.State. (required).</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="subscriptionDetails">subscriptionDetails.</param>
        /// <param name="paymentDetails">paymentDetails.</param>
        /// <param name="userInfo">userInfo.</param>
        /// <param name="shippingDetails">shippingDetails.</param>
        /// <param name="billingDetails">billingDetails.</param>
        /// <param name="customConsentProvided">customConsentProvided.</param>
        public SessionResponse(string sessionId = default(string), string merchantSerialNumber = default(string), string reference = default(string), ExternalSessionState sessionState = default(ExternalSessionState), PaymentMethod? paymentMethod = default(PaymentMethod?), ResponseSubscriptionDetails subscriptionDetails = default(ResponseSubscriptionDetails), SessionResponsePaymentDetails paymentDetails = default(SessionResponsePaymentDetails), UserInfo userInfo = default(UserInfo), ShippingDetails shippingDetails = default(ShippingDetails), BillingDetails billingDetails = default(BillingDetails), bool? customConsentProvided = default(bool?))
        {
            // to ensure "sessionId" is required (not null)
            if (sessionId == null)
            {
                throw new ArgumentNullException("sessionId is a required property for SessionResponse and cannot be null");
            }
            this.SessionId = sessionId;
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for SessionResponse and cannot be null");
            }
            this.Reference = reference;
            this.SessionState = sessionState;
            this.MerchantSerialNumber = merchantSerialNumber;
            this.PaymentMethod = paymentMethod;
            this.SubscriptionDetails = subscriptionDetails;
            this.PaymentDetails = paymentDetails;
            this.UserInfo = userInfo;
            this.ShippingDetails = shippingDetails;
            this.BillingDetails = billingDetails;
            this.CustomConsentProvided = customConsentProvided;
        }

        /// <summary>
        /// The Id of the session. Example: \&quot;v52EtjZriRmGiKiAKHByK2\&quot;.
        /// </summary>
        /// <value>The Id of the session. Example: \&quot;v52EtjZriRmGiKiAKHByK2\&quot;.</value>
        [DataMember(Name = "sessionId", IsRequired = true, EmitDefaultValue = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// The merchant&#39;s serial number. Example: \&quot;123456\&quot;
        /// </summary>
        /// <value>The merchant&#39;s serial number. Example: \&quot;123456\&quot;</value>
        [DataMember(Name = "merchantSerialNumber", EmitDefaultValue = true)]
        public string MerchantSerialNumber { get; set; }

        /// <summary>
        /// The merchant&#39;s unique reference for the transaction. Also known as OrderId. Example: \&quot;acme-shop-123-order123abc\&quot;. See https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// </summary>
        /// <value>The merchant&#39;s unique reference for the transaction. Also known as OrderId. Example: \&quot;acme-shop-123-order123abc\&quot;. See https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/</value>
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionDetails
        /// </summary>
        [DataMember(Name = "subscriptionDetails", EmitDefaultValue = true)]
        public ResponseSubscriptionDetails SubscriptionDetails { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDetails
        /// </summary>
        [DataMember(Name = "paymentDetails", EmitDefaultValue = true)]
        public SessionResponsePaymentDetails PaymentDetails { get; set; }

        /// <summary>
        /// Gets or Sets UserInfo
        /// </summary>
        [DataMember(Name = "userInfo", EmitDefaultValue = true)]
        public UserInfo UserInfo { get; set; }

        /// <summary>
        /// Gets or Sets ShippingDetails
        /// </summary>
        [DataMember(Name = "shippingDetails", EmitDefaultValue = true)]
        public ShippingDetails ShippingDetails { get; set; }

        /// <summary>
        /// Gets or Sets BillingDetails
        /// </summary>
        [DataMember(Name = "billingDetails", EmitDefaultValue = true)]
        public BillingDetails BillingDetails { get; set; }

        /// <summary>
        /// Gets or Sets CustomConsentProvided
        /// </summary>
        [DataMember(Name = "customConsentProvided", EmitDefaultValue = true)]
        public bool? CustomConsentProvided { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionResponse {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  MerchantSerialNumber: ").Append(MerchantSerialNumber).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SessionState: ").Append(SessionState).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  SubscriptionDetails: ").Append(SubscriptionDetails).Append("\n");
            sb.Append("  PaymentDetails: ").Append(PaymentDetails).Append("\n");
            sb.Append("  UserInfo: ").Append(UserInfo).Append("\n");
            sb.Append("  ShippingDetails: ").Append(ShippingDetails).Append("\n");
            sb.Append("  BillingDetails: ").Append(BillingDetails).Append("\n");
            sb.Append("  CustomConsentProvided: ").Append(CustomConsentProvided).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
