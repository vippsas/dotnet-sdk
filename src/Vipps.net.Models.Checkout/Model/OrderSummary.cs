/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// OrderSummary
    /// </summary>
    [DataContract(Name = "OrderSummary")]
    public partial class OrderSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSummary" /> class.
        /// </summary>
        /// <param name="orderLines">The order lines contain descriptions of each item present in the order. (required).</param>
        /// <param name="orderBottomLine">Contains information regarding the order as a whole. (required).</param>
        public OrderSummary(List<OrderLine> orderLines = default(List<OrderLine>), OrderBottomLine orderBottomLine = default(OrderBottomLine))
        {
            // to ensure "orderLines" is required (not null)
            if (orderLines == null)
            {
                throw new ArgumentNullException("orderLines is a required property for OrderSummary and cannot be null");
            }
            this.OrderLines = orderLines;
            // to ensure "orderBottomLine" is required (not null)
            if (orderBottomLine == null)
            {
                throw new ArgumentNullException("orderBottomLine is a required property for OrderSummary and cannot be null");
            }
            this.OrderBottomLine = orderBottomLine;
        }

        /// <summary>
        /// The order lines contain descriptions of each item present in the order.
        /// </summary>
        /// <value>The order lines contain descriptions of each item present in the order.</value>
        [DataMember(Name = "orderLines", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderLine> OrderLines { get; set; }

        /// <summary>
        /// Contains information regarding the order as a whole.
        /// </summary>
        /// <value>Contains information regarding the order as a whole.</value>
        [DataMember(Name = "orderBottomLine", IsRequired = true, EmitDefaultValue = true)]
        public OrderBottomLine OrderBottomLine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderSummary {\n");
            sb.Append("  OrderLines: ").Append(OrderLines).Append("\n");
            sb.Append("  OrderBottomLine: ").Append(OrderBottomLine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
