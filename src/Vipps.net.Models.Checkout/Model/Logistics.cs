/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// If both dynamic and fixed options are specified, dynamic options is provided to the user.  If no DynamicOptionsCallback is provided, only fixed logistics options will be used.  When using dynamic shipping we recommend that you define logistics.fixedOptions as a backup.  If the callback does not resolve successfully within 8 seconds, returns null or an empty list the system will fall back to static options.  If no fallback options are provided, the user will be presented with an error and will not be able to continue with the checkout.
    /// </summary>
    [DataContract(Name = "Logistics")]
    public partial class Logistics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Logistics" /> class.
        /// </summary>
        /// <param name="dynamicOptionsCallback">Merchant&#39;s Callback URL for providing dynamic logistics options based on customer address. Example: \&quot;https://example.com/vipps/dynamiclogisticsoption\&quot;. Can not be used with AddressFields set to false..</param>
        /// <param name="fixedOptions">Fixed list of logistics options..</param>
        /// <param name="integrations">Some optional checkout features require carrier-specific configuration. Can not be used with AddressFields set to false..</param>
        public Logistics(string dynamicOptionsCallback = default(string), List<CheckoutV3SessionPost200ResponseInner> fixedOptions = default(List<CheckoutV3SessionPost200ResponseInner>), Integrations integrations = default(Integrations))
        {
            this.DynamicOptionsCallback = dynamicOptionsCallback;
            this.FixedOptions = fixedOptions;
            this.Integrations = integrations;
        }

        /// <summary>
        /// Merchant&#39;s Callback URL for providing dynamic logistics options based on customer address. Example: \&quot;https://example.com/vipps/dynamiclogisticsoption\&quot;. Can not be used with AddressFields set to false.
        /// </summary>
        /// <value>Merchant&#39;s Callback URL for providing dynamic logistics options based on customer address. Example: \&quot;https://example.com/vipps/dynamiclogisticsoption\&quot;. Can not be used with AddressFields set to false.</value>
        [DataMember(Name = "dynamicOptionsCallback", EmitDefaultValue = true)]
        public string DynamicOptionsCallback { get; set; }

        /// <summary>
        /// Fixed list of logistics options.
        /// </summary>
        /// <value>Fixed list of logistics options.</value>
        [DataMember(Name = "fixedOptions", EmitDefaultValue = true)]
        public List<CheckoutV3SessionPost200ResponseInner> FixedOptions { get; set; }

        /// <summary>
        /// Some optional checkout features require carrier-specific configuration. Can not be used with AddressFields set to false.
        /// </summary>
        /// <value>Some optional checkout features require carrier-specific configuration. Can not be used with AddressFields set to false.</value>
        [DataMember(Name = "integrations", EmitDefaultValue = true)]
        public Integrations Integrations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Logistics {\n");
            sb.Append("  DynamicOptionsCallback: ").Append(DynamicOptionsCallback).Append("\n");
            sb.Append("  FixedOptions: ").Append(FixedOptions).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
