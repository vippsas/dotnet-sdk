/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// CheckoutV3SessionPost200ResponseInner
    /// </summary>
    [JsonConverter(typeof(CheckoutV3SessionPost200ResponseInnerJsonConverter))]
    [DataContract(Name = "_checkout_v3_session_post_200_response_inner")]
    public partial class CheckoutV3SessionPost200ResponseInner : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="PostenLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PostenLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(PostenLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="PostnordLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PostnordLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(PostnordLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="PorterbuddyLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PorterbuddyLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(PorterbuddyLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="HelthjemLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of HelthjemLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(HelthjemLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="PostiLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PostiLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(PostiLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="GlsLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GlsLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(GlsLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="DaoLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DaoLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(DaoLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutV3SessionPost200ResponseInner" /> class
        /// with the <see cref="OtherLogisticsOption" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of OtherLogisticsOption.</param>
        public CheckoutV3SessionPost200ResponseInner(OtherLogisticsOption actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(DaoLogisticsOption) || value is DaoLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GlsLogisticsOption) || value is GlsLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(HelthjemLogisticsOption) || value is HelthjemLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(OtherLogisticsOption) || value is OtherLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PorterbuddyLogisticsOption) || value is PorterbuddyLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PostenLogisticsOption) || value is PostenLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PostiLogisticsOption) || value is PostiLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PostnordLogisticsOption) || value is PostnordLogisticsOption)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: DaoLogisticsOption, GlsLogisticsOption, HelthjemLogisticsOption, OtherLogisticsOption, PorterbuddyLogisticsOption, PostenLogisticsOption, PostiLogisticsOption, PostnordLogisticsOption");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `PostenLogisticsOption`. If the actual instance is not `PostenLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PostenLogisticsOption</returns>
        public PostenLogisticsOption GetPostenLogisticsOption()
        {
            return (PostenLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PostnordLogisticsOption`. If the actual instance is not `PostnordLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PostnordLogisticsOption</returns>
        public PostnordLogisticsOption GetPostnordLogisticsOption()
        {
            return (PostnordLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PorterbuddyLogisticsOption`. If the actual instance is not `PorterbuddyLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PorterbuddyLogisticsOption</returns>
        public PorterbuddyLogisticsOption GetPorterbuddyLogisticsOption()
        {
            return (PorterbuddyLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `HelthjemLogisticsOption`. If the actual instance is not `HelthjemLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of HelthjemLogisticsOption</returns>
        public HelthjemLogisticsOption GetHelthjemLogisticsOption()
        {
            return (HelthjemLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PostiLogisticsOption`. If the actual instance is not `PostiLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PostiLogisticsOption</returns>
        public PostiLogisticsOption GetPostiLogisticsOption()
        {
            return (PostiLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GlsLogisticsOption`. If the actual instance is not `GlsLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GlsLogisticsOption</returns>
        public GlsLogisticsOption GetGlsLogisticsOption()
        {
            return (GlsLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DaoLogisticsOption`. If the actual instance is not `DaoLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DaoLogisticsOption</returns>
        public DaoLogisticsOption GetDaoLogisticsOption()
        {
            return (DaoLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `OtherLogisticsOption`. If the actual instance is not `OtherLogisticsOption`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of OtherLogisticsOption</returns>
        public OtherLogisticsOption GetOtherLogisticsOption()
        {
            return (OtherLogisticsOption)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckoutV3SessionPost200ResponseInner {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CheckoutV3SessionPost200ResponseInner.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CheckoutV3SessionPost200ResponseInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CheckoutV3SessionPost200ResponseInner</returns>
        public static CheckoutV3SessionPost200ResponseInner FromJson(string jsonString)
        {
            CheckoutV3SessionPost200ResponseInner newCheckoutV3SessionPost200ResponseInner = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCheckoutV3SessionPost200ResponseInner;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DaoLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<DaoLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<DaoLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DaoLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DaoLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GlsLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<GlsLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<GlsLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GlsLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GlsLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(HelthjemLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<HelthjemLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<HelthjemLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("HelthjemLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into HelthjemLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(OtherLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<OtherLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<OtherLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("OtherLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into OtherLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PorterbuddyLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PorterbuddyLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PorterbuddyLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PorterbuddyLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PorterbuddyLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PostenLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PostenLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PostenLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PostenLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PostenLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PostiLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PostiLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PostiLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PostiLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PostiLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PostnordLogisticsOption).GetProperty("AdditionalProperties") == null)
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PostnordLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.SerializerSettings));
                }
                else
                {
                    newCheckoutV3SessionPost200ResponseInner = new CheckoutV3SessionPost200ResponseInner(JsonConvert.DeserializeObject<PostnordLogisticsOption>(jsonString, CheckoutV3SessionPost200ResponseInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PostnordLogisticsOption");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PostnordLogisticsOption: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCheckoutV3SessionPost200ResponseInner;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CheckoutV3SessionPost200ResponseInner
    /// </summary>
    public class CheckoutV3SessionPost200ResponseInnerJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CheckoutV3SessionPost200ResponseInner).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return CheckoutV3SessionPost200ResponseInner.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return CheckoutV3SessionPost200ResponseInner.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
