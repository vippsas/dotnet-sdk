/*
 * checkout-backend-merchant-v3.API
 *
 * See the [Checkout API Guide](https://developer.vippsmobilepay.com/docs/APIs/checkout-api/).
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vipps.net.Models.Checkout.Client.OpenAPIDateConverter;

namespace Vipps.net.Models.Checkout.Model
{
    /// <summary>
    /// PostiLogisticsOption
    /// </summary>
    [DataContract(Name = "PostiLogisticsOption")]
    public partial class PostiLogisticsOption : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public PostiLogisticsType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostiLogisticsOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostiLogisticsOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostiLogisticsOption" /> class.
        /// </summary>
        /// <param name="amount">Amounts are specified in minor units. For example: 10.00 NOK should be written as 1000; 20.50 EUR should be written as 2050. (required).</param>
        /// <param name="type">type.</param>
        /// <param name="customType">customType.</param>
        /// <param name="taxRate">Tax percentage, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000.</param>
        /// <param name="brand">brand (required) (default to &quot;POSTI&quot;).</param>
        /// <param name="id">id (required).</param>
        /// <param name="priority">priority (required).</param>
        /// <param name="isDefault">isDefault (required).</param>
        /// <param name="description">description.</param>
        public PostiLogisticsOption(Amount amount = default(Amount), PostiLogisticsType? type = default(PostiLogisticsType?), string customType = default(string), int? taxRate = default(int?), string brand = @"POSTI", string id = default(string), int priority = default(int), bool isDefault = default(bool), string description = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for PostiLogisticsOption and cannot be null");
            }
            this.Amount = amount;
            // to ensure "brand" is required (not null)
            if (brand == null)
            {
                throw new ArgumentNullException("brand is a required property for PostiLogisticsOption and cannot be null");
            }
            this.Brand = brand;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PostiLogisticsOption and cannot be null");
            }
            this.Id = id;
            this.Priority = priority;
            this.IsDefault = isDefault;
            this.Type = type;
            this.CustomType = customType;
            this.TaxRate = taxRate;
            this.Description = description;
        }

        /// <summary>
        /// Amounts are specified in minor units. For example: 10.00 NOK should be written as 1000; 20.50 EUR should be written as 2050.
        /// </summary>
        /// <value>Amounts are specified in minor units. For example: 10.00 NOK should be written as 1000; 20.50 EUR should be written as 2050.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name = "customType", EmitDefaultValue = true)]
        public string CustomType { get; set; }

        /// <summary>
        /// Tax percentage, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000
        /// </summary>
        /// <value>Tax percentage, represented with 0.01 decimal points. 5000 equals 50% . Between 0-10000</value>
        [DataMember(Name = "taxRate", EmitDefaultValue = true)]
        public int? TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name = "brand", IsRequired = true, EmitDefaultValue = true)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostiLogisticsOption {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TaxRate (int?) maximum
            if (this.TaxRate > (int?)10000)
            {
                yield return new ValidationResult("Invalid value for TaxRate, must be a value less than or equal to 10000.", new [] { "TaxRate" });
            }

            // TaxRate (int?) minimum
            if (this.TaxRate < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TaxRate, must be a value greater than or equal to 0.", new [] { "TaxRate" });
            }

            if (this.Brand != null) {
                // Brand (string) pattern
                Regex regexBrand = new Regex(@"POSTI", RegexOptions.CultureInvariant);
                if (!regexBrand.Match(this.Brand).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Brand, must match a pattern of " + regexBrand, new [] { "Brand" });
                }
            }

            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Id, length must be less than 200.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // Priority (int) minimum
            if (this.Priority < (int)0)
            {
                yield return new ValidationResult("Invalid value for Priority, must be a value greater than or equal to 0.", new [] { "Priority" });
            }

            yield break;
        }
    }

}
